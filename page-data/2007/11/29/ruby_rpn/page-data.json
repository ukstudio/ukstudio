{"componentChunkName":"component---src-templates-blog-post-js","path":"/2007/11/29/ruby_rpn/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"3bd211c2-3b14-5c7e-b824-bcbdec381015","excerpt":"後置記法の文字列を計算するようStringクラスを拡張してみた。\nrpn.rb 最初はモジュールにして、それをStringクラスにincludeしようとか思ってたんだけど、モジュールにするとselfで自身の文字列を取得する方法がわからなくて断念。モジュールのself…","html":"<p><a href=\"http://ja.wikipedia.org/wiki/逆ポーランド記法\">後置記法</a>の文字列を計算するようStringクラスを拡張してみた。\n<strong>rpn.rb</strong></p>\n<pre lang=\"ruby\">\nclass String\n  def rpn\n    @expr = self.split(\" \")\n    stack = Array.new\n\n    @expr.each {|i|\n      if i == \"+\" || i == \"-\" || i == \"*\" || i == \"/\"\n        stack = calc(i, stack)\n      else\n        stack < < i\n      end\n    }\n\n    return stack[0]\n  end\n\n  private\n  def calc(operator, stack)\n    return Array(stack[1..-1].inject(stack[0].to_i){|result, i|\n      reslut = result.__send__(operator, i.to_i)\n    })\n  end\nend\n</pre>\n</pre><pre lang=\"ruby\">\nrequire 'rpn.rb'\n\"2 8 +\".rpn #=> 10\n\"4 6 -\".rpn #=> -2\n\"81 9 /\".rpn #=> 9\n\"4 3 *\".rpn => 12\n\"3 7 + 10 20 + 2 * 10 + 80 -\".rpn\n#=>10\n</pre>\n入力は文字列で返り値が数値なのが違和感あるかもしれないけど、String#hexもそんな感じだし別にいいかなと。\n<p>最初はモジュールにして、それをStringクラスにincludeしようとか思ってたんだけど、モジュールにするとselfで自身の文字列を取得する方法がわからなくて断念。モジュールのselfだとモジュール自身を指しちゃうんだよね。</p>\n<p>あとはcalcメソッドの中がなんか汚いのも気になるなぁ。</p>\n<p>全然関係ないけど、後置記法よりSchemeみたいな前置記法の方がわかりやすいと思った。</p>","frontmatter":{"title":"後置記法での計算","date":"November 29, 2007","description":null}},"previous":{"fields":{"slug":"/2007/11/27/ruby_euclid/"},"frontmatter":{"title":"ユークリッドの互除法をRubyで書いた"}},"next":{"fields":{"slug":"/2007/12/01/ruby_rpn_ujihisa_sixeight/"},"frontmatter":{"title":"後置記法のコードを添削してもらっちゃいました"}}},"pageContext":{"id":"3bd211c2-3b14-5c7e-b824-bcbdec381015","previousPostId":"e88b5e19-52b9-59b1-86d4-a8c2344f988e","nextPostId":"562fa5d2-726c-5ab7-8005-35f4b4f9ec6f"}},"staticQueryHashes":["2841359383"]}