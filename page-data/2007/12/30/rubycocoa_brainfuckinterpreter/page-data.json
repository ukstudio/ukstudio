{"componentChunkName":"component---src-templates-blog-post-js","path":"/2007/12/30/rubycocoa_brainfuckinterpreter/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"41224c7d-454c-5313-8711-04b64bee45ca","excerpt":"初めてのRubyCocoaでのプログラミング。以前作ったBrainfuckのコードを処理するRubyプログラムを流用した。主に参考にしたのはRubyCocoa 入門。と言うか、ここしか見てない。 上のテキストフィールドにBrainfuckのコードを入力して、execute…","html":"<p>初めてのRubyCocoaでのプログラミング。以前作ったBrainfuckのコードを処理するRubyプログラムを流用した。主に参考にしたのは<a href=\"http://limechat.net/rubycocoa/tutorial/\">RubyCocoa 入門</a>。と言うか、ここしか見てない。</p>\n<img src=\"http://farm3.static.flickr.com/2055/2148748886_48f93983a6.jpg?v=0\">\n<p>上のテキストフィールドにBrainfuckのコードを入力して、executeのボタンを押すと変換された文字列が下のフィールドに表示される。キャプチャのBrainfuckのコードは途切れてるだけで、実際はもっと長い。本当はテキストエリアみたいなのにしたかったんだけれど、オブジェクトがどれだかわからなかった。</p>\n<p>以前、Objective-Cで少しだけCocoaプログラミングをした時も同じことを思ったけど、Interface BuilderはやっぱりUIを設計していく上で優秀だと思う。コントローラクラスとオブジェクトを関連づける操作もかなり直感的でさすがAppleと言ったところか。</p>","frontmatter":{"title":"RubyCocoaでBrainFuckインタプリタっぽいものを作ってみた","date":"December 30, 2007","description":null}},"previous":{"fields":{"slug":"/2007/12/28/mac_leopard/"},"frontmatter":{"title":"Leopardをインストール"}},"next":{"fields":{"slug":"/2008/01/02/agile_practice/"},"frontmatter":{"title":"アジャイルプラクティス - 達人プログラマに学ぶ現場開発者の習慣"}}},"pageContext":{"id":"41224c7d-454c-5313-8711-04b64bee45ca","previousPostId":"9f4b5dd2-f9b7-5a57-a1a8-4b503545722e","nextPostId":"c6b02b27-b0f4-5189-8213-0ae12615a467"}},"staticQueryHashes":["2841359383"]}