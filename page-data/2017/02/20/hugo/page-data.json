{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017/02/20/hugo/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"3aebac90-d7a9-5b0f-a0c7-1dd2e5030f99","excerpt":"ブログを割とほったらかしにしていてずっとどうにかしたいな〜と思ってたので少し手を入れた。本当はMiddlemanのままでHTML/CSSを自分でコーディングしようかなと思っていたのだけど、Middleman…","html":"<p>ブログを割とほったらかしにしていてずっとどうにかしたいな〜と思ってたので少し手を入れた。本当はMiddlemanのままでHTML/CSSを自分でコーディングしようかなと思っていたのだけど、Middlemanがメジャーバージョンがあがっていてバージョンアップを頑張るぐらいなら今ならもっといいシステムがありそうだよなぁということでやめた。</p>\n<p>Hugoにしたのは、ちょっと試してみてさすがにビルドが速かったのと、markdownの記事がほとんどそのまま移行できるから。と言っても最近のこの手の静的サイトをビルドする系のツールは大体markdown対応してるとは思うけど。</p>\n<p>ちょっと苦労したのはHugoに<a href=\"https://gohugo.io/content/front-matter/\">Front Matter</a>というものがあって、そこに記事の作成日やタイトルをメタ情報としていれるんだけど、Middlemanで使ってたmarkdownにはdateの情報がHugoでパースできなかったりそもそも入っていなかったりした点。</p>\n<p>日付情報がないと記事の並び順がおかしくなるので、golangでmarkdownのファイル名からFrontMatterに作成日を入れるスクリプトを書いた（幸いファイル名に日付を入れるようにしていた）。普段ならRubyで書いちゃうけど最近はgolangに興味があるのでなるべくgolangで書くようにしている。</p>\n<p>あとはURLが<code class=\"language-text\">/2017/02/21/hugo</code>だったのが今回の移行で<code class=\"language-text\">/posts/2017/02/21/hugo</code>になったのだけど、Front MatterにAliasesというのがあって、旧URLから新URLにリダイレクトする仕組みがあったのでそこもなんとかなかった（これもgolangでaliasesを埋め込んだ）</p>\n<p>というわけで、今までひどいデザイン状態で放置していたブログだけど、最低限みれるようにできた。</p>","frontmatter":{"title":"ブログをMiddlemanからHugoに移行した","date":"February 20, 2017","description":null}},"previous":{"fields":{"slug":"/2016/12/29/pmconfjp/"},"frontmatter":{"title":"Japan Product Manager Conferenceの資料公開"}},"next":{"fields":{"slug":"/2017/02/24/high_output_management/"},"frontmatter":{"title":"HIGH OUTPUT MANAGEMENT 読了"}}},"pageContext":{"id":"3aebac90-d7a9-5b0f-a0c7-1dd2e5030f99","previousPostId":"b3148749-83c2-513f-9c59-0125c7d6c4b7","nextPostId":"35f7313f-0bb1-5ee9-b295-f3dd71a633c6"}},"staticQueryHashes":["2841359383"]}