{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2008/02/25/haskell_sec2/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"6357969e-b5fc-5b17-8a4e-491eb5bd7b04","excerpt":"「main = 」は変数mainの定義. 「putStrLn “Hello, World!“」が変数mainの値となる。putStrLnは標準出力に文字列と開業を出力する時に使う関数で、正確に言うと文字列を1つ受けとり、その文字列と改行を出力するアクションを返す関数. 「putStrLn “Hello, World…","html":"<h2>ハロー、ワールド</h2>\n<pre lang=\"haskell\">\nmain = putStrLn \"Hello, World!\"\n</pre>\n<p>「main = 」は変数mainの定義. 「putStrLn “Hello, World!“」が変数mainの値となる。putStrLnは標準出力に文字列と開業を出力する時に使う関数で、正確に言うと<strong>文字列を1つ受けとり、その文字列と改行を出力するアクションを返す関数</strong>.</p>\n<p>「putStrLn “Hello, World!“」の式を、Haskellでは<strong>“Hello,World!”にputStrLn関数を適用する</strong>と言うらしいけど、今一ピンとこないな. 普段Rubyやってるからかな. putStrLn関数を”Hello,World!”にあてはめて用いると言いなおせばまだわかるかな. ・・・あんまり変わらないか.</p>\n<h2>cat</h2>\n<pre lang=\"haskell\">\nmain = do cs < - getContents\n          putStr cs\n</pre>\n<p>1行目のcs &#x3C; - getContentsとputStr csの2つの式が揃っているのには意味があるらしい。インデントに意味があるなんてPythonみたいなやつだ。複数の式のインデントを揃えることで、do式で1つのブロックに束ねることができる。この規則をレイアウトやオフサイドルールと言う。<strong>複数のアクションをdo式でまとめると上から下へ実行されることが保証される</strong>。</p>\n<p>アクションの結果を得るときに「&#x3C; -」を使う。このサンプルの場合だと、getContentsアクションで入力した文字列が変数csに結びつき、それを「<strong>変数を値(アクションの結果)に束縛する(bind)</strong>」と言う。値が変数を束縛するのか。値は寂しがりやさんだな。</p>\n<p>このサンプルには遅延評価も関連してるが、ここではあまり詳しく触れてないのでスルー。</p>\n<h2>countline</h2>\n</pre><pre lang=\"haskell\">\nmain = do cs < - getContents\n          print $ length $ lines cs\n</pre>\n<p>Haskellにおいてリストはかなり重要。Haskellでは<strong>文字列もリスト</strong>となっている。リストには<strong>一種類の値しか入れられない</strong>。このあたりはRuby、JavaScriptあたりをやっていると忘れがちなので注意。</p>\n</pre><pre lang=\"haskell\">\n['a', 'b', 'c'] => \"abc\"\n[1, 2, 'a'] => NG\n</pre>\n<p>$演算子は+や-と同じような二項演算子。ここでは<strong>式を区切る</strong>ために使われている。$を()に置き換えると以下のようになる。</p>\n<pre lang=\"haskell\">\nmain = do cs < - getContents\n          print (length (lines cs))\n</pre>\n<h2>head</h2>\n</pre><pre lang=\"haskell\">\nmain = do cs < - getContents\n          putStr $ firstNLines 10 cs\n<p>firstNLines n cs = unlines $ take n $ lines cs</p>\n</pre>\n<p>4行目のfirstNLinesは関数の定義。基本的にmainの時と同じだけど、今回は仮引数が登場している。nとcsがそれぞれ第1仮引数、第2引数。</p>\n</pre><pre lang=\"haskell\">\n関数名 仮引数1 仮引数2・・・ = 関数本体\n</pre>\n<h2>tail</h2>\n<pre lang=\"haskell\">\nmain = do cs < - getContents\n          putStr $ lastNLines 10 cs\n<p>lastNLines n cs = unlines $ takeLast n $ lines cs\ntakeLast n ss = reverse $ take n $ reverse ss</p>\n</pre>\n<p>今迄に登場したものだけを使っているので、特別なことはなし。</p>\n<h2>練習問題</h2>\n<p>countbyte.hs</p>\n</pre><pre lang=\"haskell\">\nmain = do cs < - getContents\n          print $ length cs\n</pre>\n<p>countword.hs</p>\n</pre><pre lang=\"haskell\">\nmain = do cs < - getContents\n          print $ length $ words cs\n</pre>\n<p>とりあえずチャチャっと書いてみた。countword.hsは単語数だから問題ないと思うけど、countbyte.hsは日本語の全角文字とかも1byte扱いすると思う。と思ったらちゃんと計算してくれた。でも、ghciで”あ”のlengthをとると1が返ってくる。よくわからん。</p>\n</pre><pre lang=\"haskell\">\nPrelude> length \"あ\"\n1\n</pre>","frontmatter":{"title":"ふつケル第2章","date":"February 25, 2008","description":null}},"previous":{"fields":{"slug":"posts//2008/02/15/vim_ruby_on_rails/"},"frontmatter":{"title":"VimでRuby on Railsの開発する為の環境構築"}},"next":{"fields":{"slug":"posts//2008/02/27/haskell_sec3/"},"frontmatter":{"title":"ふつケル第3章"}}},"pageContext":{"id":"6357969e-b5fc-5b17-8a4e-491eb5bd7b04","previousPostId":"0e19c09f-65eb-5be0-b7f9-2e8a4e527868","nextPostId":"8484f948-6a27-5b9d-bf89-8a9269658eb2"}},"staticQueryHashes":["2841359383"]}