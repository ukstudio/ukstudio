{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2008/01/11/ruby_tumblr_getimages/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"19e7976f-8649-5375-95f4-466594394132","excerpt":"今じゃほとんどTumblrは使ってないんだけど、なんとなく画像を取得するスクリプトを書いてみた。iPod touchに放り込んでみようかなとか思ったのよ。 とりあえずコード。 ちなみにXPathはどんなものかなんとなくは知っていたけれど使うのは初めて。 処理内容としてはTumblr APIを使って50件ずつ画像のURL…","html":"<p>今じゃほとんどTumblrは使ってないんだけど、なんとなく画像を取得するスクリプトを書いてみた。iPod touchに放り込んでみようかなとか思ったのよ。</p>\n<p>とりあえずコード。</p>\n<pre lang=\"ruby\">\nrequire 'open-uri'\nrequire 'rexml/document'\nrequire 'FileUtils'\n\nres = open(url)\ndoc = REXML::Document.new(res.read)\ntotal = REXML::XPath.first(doc, \"/tumblr/posts\").attributes['total'].to_i\n\n0.step(total, 50){|n|\n  image_list = []\n  res = open(url + \"&start=#{n}\")\n  doc = REXML::Document.new(res.read)\n\n  data = REXML::XPath.match(doc, \"/tumblr/posts/post\")\n  data.each{|i| image_list < < i.elements['photo-url'].text }\n\n  image_list.each{|image|\n    tempfile = open(image)\n    FileUtils.cp(tempfile.path, image.split(/\\//).last)\n  }\n}\n</pre>\n<p>ちなみにXPathはどんなものかなんとなくは知っていたけれど使うのは初めて。</p>\n<p>処理内容としてはTumblr APIを使って50件ずつ画像のURLを取得して、1個ずつカレントディレクトリにコピーすると言う至極単純な方法を選んだ。人によっては1000単位で画像があるだろうから(ちなみにオレは1000ちょいだった)かなり時間がかかると思う。</p>\n<p>1つよくわからない現象が起きていて、とある画像を取得するタイミングで必ずエラーが発生する。どの画像かまでは調べてないけど、いつも同じ画像なのは確か。</p>\n</pre><pre lang=\"bash\">\n/opt/local/lib/ruby/1.8/FileUtils.rb:1407:in `fu_each_src_dest0': undefined method `to_str' for nil:NilClass (NoMethodError)\n        from /opt/local/lib/ruby/1.8/FileUtils.rb:1393:in `fu_each_src_dest'\n        from /opt/local/lib/ruby/1.8/FileUtils.rb:382:in `cp'\n        from tumblr_getimages.rb:19\n        from tumblr_getimages.rb:17:in `each'\n        from tumblr_getimages.rb:17\n        from tumblr_getimages.rb:10:in `step'\n        from tumblr_getimages.rb:10\n</pre>\n<p>とりあえず、openで取得したtempfileとtempfile#pathをpで表示してみた。以下がその問題が起きる部分。なぜにStringIO・・・?</p>\n<pre lang=\"bash\">\n#<file :/var/folders/ni/niHXwO9-GoO0yPJpz3WMm++++TI/-Tmp-/open-uri.1153.4>\n\"/var/folders/ni/niHXwO9-GoO0yPJpz3WMm++++TI/-Tmp-/open-uri.1153.4\"\n#</file><file :/var/folders/ni/niHXwO9-GoO0yPJpz3WMm++++TI/-Tmp-/open-uri.1153.5>\n\"/var/folders/ni/niHXwO9-GoO0yPJpz3WMm++++TI/-Tmp-/open-uri.1153.5\"\n#<stringio :0x5c4af4>\nnil\n</stringio></file></pre>\n<p>無理矢理な対処としてはコピーの処理の時にオブジェクトのクラスを調べて、StringIOを回避すればとりあえずは何とかなる。そのかわり、その画像はローカルに保存されないけれど。</p>\n<pre lang=\"ruby\">\n  FileUtils.cp(tempfile.path, image.split(/\\//).last) if tempfile.kind_of?(Tempfile)\n</pre>\n<p>ちなみに1000件も取得するのが途中で面倒になってしまったので最後まで取得できるかまでは試してない。一応100件ぐらいは取得できたけど。</p>\n<p>tumblrのIDとか取得の開始地点、1回で取得する件数とかそのまま直書きしちゃってるけど、コマンドラインの引数で与えるようにすればそれなりに使い勝手がよくなるかもしれない。</p>\n<p>本当はページ番号と1ページごとの件数を与えれば、そのページの画像を取得するようにするつもりだったんだけどね。他にもテキストとかがたんぶらってあったりすると画像の数が不確定で、そこらへんどううまく処理するかとか考えると結構時間かかりそうだったからやめた。</p>\n<h2>追記: 08/01/11 6:13</h2>\nエラーが発生する画像を特定した。\n<a href=\"http://data.tumblr.com/14065003_500.jpg\">http://data.tumblr.com/14065003_500.jpg</a>\n<p>パっと見、普通の画像なんだけどな。試しにirbから取得してみる。</p>\n<pre lang=\"ruby\">\n>> require 'open-uri'\n=> true\n>> tempfile = open(\"http://data.tumblr.com/14065003_500.jpg\")\n=> #<stringio :0x3d4384>\n</stringio></pre>\n<p>やっぱり、StringIOオブジェクトだ・・・なんでー?</p>\n<h2>追記: 08/01/11 10:25</h2>\nちょっとググってみたらruby-listの過去ログが引っかかった。\n<p><a href=\"http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/40937\">Re: multipartフォームから受け取ったオブジェクトにstatメソッドでエラー</a></p>\n<p>上のリンクはcgi.rbの話だけど、open-uriでもどうやら10kb未満の画像だとTempfileではなく、StringIOになる模様。ちなみに該当の画像は8kbでした。こやつめ、ハハハ。</p>\n<h2>追記 08/01/12 1:27</h2>\nコードを修正しました。\n<a href=\"http://uk-studio.net/2008/01/12/ruby_tumblr_getimages_2nd/\">Tumblrの全画像を取得するRubyスクリプト改</a>","frontmatter":{"title":"Tumblrの全画像を取得するRubyスクリプトを書いた・・・けど","date":"January 11, 2008","description":null}},"previous":{"fields":{"slug":"posts//2008/01/09/2007_history/"},"frontmatter":{"title":"2007年はTwitterが中心の1年でした"}},"next":{"fields":{"slug":"posts//2008/01/12/blog/"},"frontmatter":{"title":"オレがブログを書く理由"}}},"pageContext":{"id":"19e7976f-8649-5375-95f4-466594394132","previousPostId":"0a167106-e64b-5f68-9129-911611a3b102","nextPostId":"d4aed904-6971-550a-bcef-2bd3a90d909f"}},"staticQueryHashes":["2841359383"]}