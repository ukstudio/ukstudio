{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2007/08/09/sicp_002/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"c9eb25b8-379b-5d00-9309-34d66a1862f1","excerpt":"(+ 21 35 12 7)\n;;21 + 35 + 12 + 7 (+ (* 3 5) (- 10 6))\n;;(3 * 5) + (10 - 6) 当たり前だけど、値と名前の対応付けを解釈系は記憶している。その記憶のことを(大域)環境という。大域があるなら局所もあるのかな。 論理演算も使えて、andやor、not…","html":"<h2>1.1 プログラムの要素</h2>\n<dl> <dt>基本式</dt> <dd>言語が関わる最も単純なものを表す</dd> <dt>組合せ法</dt> <dd>より単純なものから合成物を作る</dd> <dt>抽象化法</dt> <dd>合成物に名をつけ、単一のものとして扱う</dd> </dl>\n<h3>1.1.1式</h3>\nschemeでは前置記法を採用している。慣れるまでが大変かも？\n<pre lang=\"scheme\">\n(+ 137 349)\n;;137 + 349\n<p>(+ 21 35 12 7)\n;;21 + 35 + 12 + 7</p>\n<p>(+ (* 3 5) (- 10 6))\n;;(3 * 5) + (10 - 6)</pre></p>\n<h3>1.1.2 組合せの評価</h3>\ndefineをつかって値と名前の対応付け。いわゆる変数の宣言。\n<p>当たり前だけど、値と名前の対応付けを解釈系は記憶している。その記憶のことを(大域)環境という。大域があるなら局所もあるのかな。</p>\n<h2>1.1.3 組合せの評価</h2>\n<ol> 組合せの評価\n\t<li>組合せの部分式を評価する</li>\n\t<li>最左部分式の値である手続き(演算子)を、残りの部分式の値である引数(被演算子)に作用させる</li>\n</ol>\n<blockquote> すなわち評価の規則は、本質的に再帰的(recursive)である</blockquote>\n一般的評価規則の例外を特殊形式(special forms)と言い、defineもそのうちの１つ。\n<h3>1.1.4 合成手続き</h3>\n合成手続きの作り方。例として二乗を返す合成手続きをサンプルにあげている。基本手続きが変数ならこっちは関数みたいなもの?\n<pre lang=\"scheme\">\n(define (square x) (* x x))</pre>\n<h3>1.1.5 手続き作用の置き換えモデル</h3>\n作用的順序と正規順序の違いについて。\n<dl> <dt>作用的順序</dt> <dd>引数を評価し、作用させる</dd> <dt>正規的順序</dt> <dd>完全に展開し、簡約する</dd> </dl>通常lispは作用的順序の評価を行うらしい。正規順序は必要になるまで評価を行わないってことだと思うけど、遅延評価って意味なのかな。遅延評価を知らないから何とも言えないけど。\n<h3>1.1.6 条件式と述語</h3>\n特殊形式「cond」と「if」について。condの方は条件(述語)を複数指定できるけど、ifは1つのみ。他の言語でいうelseifがcondにはあるけど、(schemeの)ifにはelseしかない感じ。\n<p>論理演算も使えて、andやor、notがある。andとorは特殊形式で、notは通常の手続き。手続きっていう言葉の意味が自分の中でちょっと曖昧かもしれない。</p>\n<h3>問題1.1</h3>\n手計算でやって、実際に動かして答え合わせをした。\n<h3>問題1.2\n<pre lang=\"scheme\">\n(/ (+ 5 4) (- 2 (- 3 (+ 6 (/ 4 5)))))(* 3 (- 6 2) (- 2 7)))\n;;-37/150</pre>\n</h3>\n<h3>問題1.3</h3>\n<pre lang=\"scheme\">\n(define (square x) (* x x))\n(define (square_add x y) (+ (square x) (square y)))\n<p>(define (ex1<em>3 x y z)\n(if (&#x3C; x y)\n(cond ((&#x3C; x z) (square</em>add y z))\n(else (square<em>add x y)))\n(cond ((&#x3C; y z) (square</em>add x z))\n(else (square<em>add x y)))\n)\n)</pre>\n結構時間かけちゃった。あらかじめsquareとsquare</em>addを定義してなるべく()を減らす作戦。書き終わった後に気づいたんだけど、最初の分岐はifなのにその次はcondなんだよね。両方ifでいいのにね。</p>\n<h3>問題1.4</h3>\n問題の意味がうまく汲み取れないけど、多分「Schemeはこんなこともできるんだぜ!すげーだろ!」ってことを言ってるんだと思う。\n<pre lang=\"scheme\">\n((if (&gt; b 0) + -) a b))\na = 3,b = -2\n(- 3 -2) -&gt; 5\na = 3, b = 2\n(+ 3 2) -&gt; 5</pre>\n引数の値によって手続きも変えられるってことかな。\n<h3>問題1.5</h3>\nこれも結構理解できるまで時間がかかった。\n<p>作用的順序の場合(test 0 (p))で先に(p)を評価する。けれど(p)の評価した時の結果が(p)だから無限ループになる。</p>\n<pre lang=\"scheme\">\n(test 0 (p))\n(p)を先に評価\n(test 0 (p))\n以降繰り返し...</pre>\n<p>正規順序の場合は、(p)を評価するのは後回しにするから無限ループにはならないで済む</p>\n<pre lang=\"scheme\">\n(test 0 (p))\n(if( (= 0 0)) 0 p))\n(= 0 0)が#tだから0を返す</pre>","frontmatter":{"title":"SICP第1章 手続きによる抽象の構築(1)","date":"August 09, 2007","description":null}},"previous":{"fields":{"slug":"posts//2007/08/03/sicp_001/"},"frontmatter":{"title":"いい加減SICPを読み始めることにした"}},"next":{"fields":{"slug":"posts//2007/08/22/job_change/"},"frontmatter":{"title":"職場を変えようと思います"}}},"pageContext":{"id":"c9eb25b8-379b-5d00-9309-34d66a1862f1","previousPostId":"b2011622-8604-5690-9d42-7da822e29c29","nextPostId":"e8e7720e-8635-54b4-813d-d3dc7c3d645b"}},"staticQueryHashes":["2841359383"]}