{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2010/10/06/work/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"338859b5-6d10-550d-9ea8-af2a711bfc9e","excerpt":"今の仕事についてつらつらと書く。今漠然と思ってることを書き出しただけなので、そんなに意味のある内容でもないかも。 何はともあれ、今うちのチームではCTO…","html":"<p>今の仕事についてつらつらと書く。今漠然と思ってることを書き出しただけなので、そんなに意味のある内容でもないかも。</p>\n<h2>アジャイル</h2>\nそもそも何をもってアジャイルと言うのか、中々難しいところではある。昨日から読んでる「<a href=\"http://amzn.to/a6ueou\">間違いだらけのソフトウェア・アーキテクチャ</a>」では<q>僕はアジャイル(開発)というのは、できればアジャイル宣言を守るか、守る努力をしているものだけに、その名前を冠してほしいと思っているけど・・・。</q>とある。そういう意味だと改めてうちのチームでもアジャイル宣言を確認するべきかもしれない。\n<p>何はともあれ、今うちのチームではCTOのちゃんとアジャイルな開発をしていきたいという想いからいくつかのプラクティスを実践している。イテレーション、プランニングポーカー、バーンダウンチャートなど。まだまだチームとして未熟な為、見積りの精度ややり方が少しうまくいっていない気はするけどこの辺りは徐々に改善されそう。</p>\n<p>特にポイントを付けたことで、今週に終わらせないといけないポイント量や、バーンダウンチャートで間に合うのか間に合わないのかがわかるのがいい。現時点で正直色々と間に合っていないのだけど、納期と言うか1回目のリリースのタイミングは既に決まっていてそれはずらすことが出来ない。その代わり1回目のリリースに向けてストーリーを削れないかという交渉をしたりした。以前は(実は以前お世話になったところで個人として契約して仕事している)そもそもこう言う交渉すらなかったのでいい兆候だと思う。</p>\n<p>ただ、削ってもまだ間に合わないのでここは残業や土日でカバーをするしかないのが残念なところ。土日や残業で消化したポイントをベロシティに含むと正しいベロシティが出ないのかなと少し思ったけど、残業や土日作業は一時的なもの(リリースが今月)なので、そのうち誤差としておさまっていくのかな。</p>\n<p>最近コードを書くことに集中していたので改めてこの辺も勉強しなおすべきかなとちょっと思っている。とりあえず、「<a href=\"http://amzn.to/cxFXas\">アジャイルな見積りと計画づくり</a>」を読み直そうと思う。</p>\n<h2>ネガティブな感情</h2>\n実は最近自分自身にあまり良くない兆候がある。漠然とだけど、汚いコードや落ちてるテストを見ると「なんでちゃんとやれないんだ」という少しネガティブな感情があることにここ数日気づいた。念の為言っておくと、「テスト落ちてますよー」と言えばすぐ直してコミットしてくれるし、汚いコードと言うのもエンジニア同士でよくネタにする「ひどいコード」みたいなものではなく、「もう少し上手く書けるよなー、これ」と言ったもの。\n<p>つまり、コードの質に拘るあまり若干過敏になり過ぎてる部分がある気がしてる。もちろんコードは出来る限りきれいに書くべきだとは思う。ただ、そこに拘り過ぎて本来の目的を忘れちゃいけないと思う。今の目標は最初のリリースに間に合わせることで、細かいリファクタリングや修正はその後でも出来る。</p>\n<h2>テスト駆動開発</h2>\nテストコードの量を見る限り少し不十分な部分もありそうだけど、少なくとも全くテストが無いって部分は無くなってきてる感じ。バグがあった場合も「再現するテストコード書いて修正してください」で済むのでいい感じ。TDDに関してはそれなりに習得していると思うので、チーム内で不十分だなと思ったところは上手くサポートしていきたい。例えば僕が率先してテストコードを書けばそのコードから他のメンバーも書き方を知ることができるみたいに。\n<h3>steak</h3>\n今回、受け入れテストをsteakで書いてる。今のところ僕が書いてるだけだけど。実はまだチーム内でcukeにするかsteakにするかハッキリ決まってない。と言うのももしかしたらcukeのシナリオをエンジニアじゃない人が書く可能性があるから。ただ、結局テストデータを用意する必要があったりとかで中々難しいのかなとも思う部分もある。この辺@moroさんとちょっと話してみたいな。\n<h2>git-svn小話</h2>\ngit-svnについては<a href='http://ukstudio.jp/2010/09/13/git-svn/'>この間も記事にした</a>けど、少しだけ補足。\n<h3>topic branchをmergeする前にgit rebase master</h3>\ngitはmergeした時にmerge commitを作るときがある。コミットメッセージがデフォで「Merge branch 'hoge」みたいになっている奴。これをそのままgit svn dcommitするとその「Merge branch 'hoge'」のコミットだけsvn側に反映される。これだと他の人が具体的にどんなコミットかよくわからない。なので、branchをmergeする前にmasterでgit svn rebaseしてbranch側でgit rebase masterをすると良い。これで履歴が一直線になるのでmerge commitが作られずsvn側にもちゃんとbranch側の各コミットが反映される。\n<h3>topic branchは作業が終わるまでmasterの変更を取り込まない</h3>\nこの辺の話は「<a href=\"http://amzn.to/cFOuty\">入門Git</a>」に詳しく書いてあったので細かくは話さない。何となしに、作業中のbranchに最新のmasterをrebaseしたら落ちてるテストがコミットされててちょっと面倒だったので改めて思い直した次第。\n<h2>Rails3.0とRuby1.9.2</h2>\n今のところ目立って困ってる所はなし。主要なライブラリもRails3.0に対応してきたし、結構実務でも使えるのではなかろうか。ただ、日本語の情報があまりなくRailsGuides(僕は大体<a href='http://edgeguides.rubyonrails.org/'>edge</a>を見てる)や、<a href='http://railsapi.com/'>http://railsapi.com/</a>や海外のブログを見ながら手探りな感じの部分もあったのでその辺は少し大変かも。個人的には今後Rails2系を使う理由はないかなといった所。個人的にはArelがお気に入り。Arelについては@a_matsudaさんの<a href='http://gihyo.jp/dev/serial/01/ruby/0043'>Ruby Freaks Lounge 第43回 Rails 3を支える名脇役たち その1 - Arel -</a>や<a href='http://edgeguides.rubyonrails.org/active_record_querying.html'>Active Record Query Interface</a>を読むといいです。\n<p>本当につらつらと書いただけになったけど、ここまで読んでくれた人ありがとうございました。</p>","frontmatter":{"title":"最近のお仕事まわりでツラツラと書く","date":"October 06, 2010","description":null}},"previous":{"fields":{"slug":"posts//2010/09/13/git-svn/"},"frontmatter":{"title":"Better Subversionとしてのgit-svn"}},"next":{"fields":{"slug":"posts//2010/10/07/steak_stats/"},"frontmatter":{"title":"steakのspec/acceptanceをrake statsに反映させる"}}},"pageContext":{"id":"338859b5-6d10-550d-9ea8-af2a711bfc9e","previousPostId":"7d57c397-69ff-5889-aaa1-1425cf5b7a76","nextPostId":"7b0b355a-7748-5c54-bd9f-bdc790b70215"}},"staticQueryHashes":["2841359383"]}