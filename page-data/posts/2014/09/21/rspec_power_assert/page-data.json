{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2014/09/21/rspec_power_assert/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"5bcbeb8c-b027-5a7c-8a40-153e5b3fdb14","excerpt":"RubyKaigi 2014でpower assertの話を聞いてrspecでどうにかならんかちょっと考えてみました。まず結論だけ書くとrspecでpower assertを使いたければ以下の様に書けばOK。 これを で実行するとこんな感じ。power_assertは事前にrequire…","html":"<p>RubyKaigi 2014でpower assertの話を聞いてrspecでどうにかならんかちょっと考えてみました。まず結論だけ書くとrspecでpower assertを使いたければ以下の様に書けばOK。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'rspec'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'minitest'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'minitest-power_assert'</span>\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">Minitest</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">Assertions</span>\n    <span class=\"token keyword\">prepend</span>  <span class=\"token constant\">Minitest</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">PowerAssert</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Assertions</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token constant\">RSpec</span><span class=\"token punctuation\">.</span>configure <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n  config<span class=\"token punctuation\">.</span>expect_with <span class=\"token symbol\">:minitest</span>\n<span class=\"token keyword\">end</span>\n\ndescribe <span class=\"token string\">'Test'</span> <span class=\"token keyword\">do</span>\n  it <span class=\"token string\">'test'</span> <span class=\"token keyword\">do</span>\n    assert <span class=\"token punctuation\">{</span> <span class=\"token number\">1.</span>to_s<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.</span>to_i<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>これを</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ rspec --color -rpower_assert power_assert.rb</code></pre></div>\n<p>で実行するとこんな感じ。power_assertは事前にrequireした方が情報量がちょっと増える。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Failures:\n\n  1) Test test\n     Failure/Error: assert { 1.to_s.class == 1.to_i.class }\n     Minitest::Assertion:\n\n           assert { 1.to_s.class == 1.to_i.class }\n                      |    |     |    |    |\n                      |    |     |    |    Fixnum\n                      |    |     |    1\n                      |    |     false\n                      |    String\n                      &quot;1&quot;</code></pre></div>\n<h2>letとsubject</h2>\n<p>power<em>assertの0.1.3だとdefined</em>methodで定義されたメソッドの値が取れていないらしく、letやsubjectの値が表示されない。現時点でのmasterの0.1.4devだと修正されているとのことなのでちゃんと表示される。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">describe <span class=\"token string\">'Test'</span> <span class=\"token keyword\">do</span>\n  let<span class=\"token punctuation\">(</span><span class=\"token symbol\">:klass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1.</span>to_s<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">}</span>\n  it <span class=\"token string\">'test'</span> <span class=\"token keyword\">do</span>\n    assert <span class=\"token punctuation\">{</span> klass <span class=\"token operator\">==</span> <span class=\"token number\">1.</span>to_i<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>これを実行すると</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Failures:\n\n  1) Test test\n     Failure/Error: assert { klass == 1.to_i.class }\n     Minitest::Assertion:\n\n           assert { klass == 1.to_i.class }\n                    |     |    |    |\n                    |     |    |    Fixnum\n                    |     |    1\n                    |     false\n                    String</code></pre></div>\n<p>こんな感じ。subjectも大体おなじ。</p>\n<h2>expectとマッチャ</h2>\n<p>この方法はMinitestのadapterとminitest-power_assertを使うようにしているので無理。</p>\n<p>ちなみに <a href=\"https://gist.github.com/mizoR/3cf068eeae033bd5db5a\">rspec で 手軽に power_assert 出力できるようにする</a> の方法でexpectを使ってみると</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'rspec/core'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'power_assert'</span>\n\n<span class=\"token keyword\">module</span> <span class=\"token constant\">RSpec</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">PowerAssert</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">power_assert</span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>block<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">PowerAssert</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>pa<span class=\"token operator\">|</span>\n        <span class=\"token keyword\">begin</span>\n          pa<span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span>\n        <span class=\"token keyword\">rescue</span> <span class=\"token constant\">RSpec</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Expectations</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ExpectationNotMetError</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> e\n          e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\\nPowerAssert:\\n<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>pa<span class=\"token punctuation\">.</span>message_proc<span class=\"token punctuation\">.</span>call<span class=\"token delimiter tag\">}</span></span>\"</span>\n          <span class=\"token keyword\">raise</span> e\n        <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RSpec</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Core</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ExampleGroup</span>\n  <span class=\"token keyword\">include</span> <span class=\"token constant\">RSpec</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">PowerAssert</span>\n<span class=\"token keyword\">end</span>\n\ndescribe <span class=\"token string\">'Test'</span> <span class=\"token keyword\">do</span>\n  it <span class=\"token string\">'test'</span> <span class=\"token keyword\">do</span>\n    power_assert <span class=\"token punctuation\">{</span>\n      expect<span class=\"token punctuation\">(</span><span class=\"token number\">1.</span>to_s<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token number\">1.</span>to_i<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>これは</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">       PowerAssert:\n             expect(1.to_s.class).to eq(1.to_i.class)\n             |        |    |      |  |    |    |\n             |        |    |      |  |    |    Fixnum\n             |        |    |      |  |    1\n             |        |    |      |  #&lt;RSpec::Matchers::BuiltIn::Eq:0x007f0850c91d78 @expected=Fixnum, @actual=String&gt;\n             |        |    |      nil\n             |        |    String\n             |        &quot;1&quot;\n             #&lt;RSpec::Expectations::ExpectationTarget:0x007f0850caa170 @target=String&gt;</code></pre></div>\n<p>こうなってしまう。この場合、expectの@targetにStringという結果が入っているのでそれを取り出すようにして、eqの方も@expectedに期待するものがはいってるのでそれを取りだすようにすればいいのかなぁ。</p>\n<p>もしくはexpectとeqの中の値さえわかれば良いといえば良いのでいっそ値をださなくてもいいのかも? 例えばこんな感じ。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">       PowerAssert:\n             expect(1.to_s.class).to eq(1.to_i.class)\n                      |    |              |    |\n                      |    |              |    Fixnum\n                      |    |              1\n                      |    |\n                      |    |\n                      |    String\n                     &quot;1&quot;</code></pre></div>\n<p>別の例としてbe_falseyだとこんな感じ。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     Failure/Error: expect(nil.to_s.to_i).to be_falsey\n       expected: falsey value\n            got: 0\n       PowerAssert:\n             expect(nil.to_s.to_i).to be_falsey\n             |          |    |     |  |\n             |          |    |     |  #&lt;RSpec::Matchers::BuiltIn::BeFalsey:0x007fa84b53bb00 @actual=0&gt;\n             |          |    |     nil\n             |          |    0\n             |          &quot;&quot;\n             #&lt;RSpec::Expectations::ExpectationTarget:0x007fa84b3e02b0 @target=0&gt;</code></pre></div>\n<p>これに関していうとbe<em>falseyにはfalseが欲しいという情報がない。be</em>falseyを見れば求めてるものはわかるって話かもしれないけど… 更に言うとRSpec3でComposable Matcherが入ったりとか、以前からあるCustom Matcherとかがあったりして、それら全部対応するのは厳しいなーという感じ(そもそも対応できるのかもよくわからない…)</p>\n<p>そもそもの話をするとそういったマッチャというか、たくさんあるassertion methodを使い分けしたくないからpower assertをつかうわけで別にマッチャとか使わなくていいのではという気持ちがある。</p>\n<p>なのでexpectとかカスタムマッチャとかは(power assertを使う部分では)諦めてassertですませるのがよさそうかなと個人的には思う。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">config<span class=\"token punctuation\">.</span>expect_with <span class=\"token symbol\">:minitest</span>\nconfig<span class=\"token punctuation\">.</span>expect_with <span class=\"token symbol\">:rspec</span></code></pre></div>\n<p>spec<em>helper.rbにminitestもrspecも両方使うよう書けばpower</em>assertを使いたいところと、rspecを使いたいところで分けることができるのでどうしてもマッチャを使いたいところは素直にマッチャを書いてpower assertは諦めるしかない。</p>\n<p>今あるテスト資産をそのまんまpower assert対応にはできないのが悲しいところではあるけれども、このassertを使う方法でもexpectation部分以外はrspecの機能そのまま使えるのでそこまで悪くはないかなと思う。</p>\n<p>まだpower_assert gemの実装を理解できていないので、もしかしたらうまいことやれるかもしれないけどとりあえずここでギブアップ…</p>","frontmatter":{"title":"RSpecでPower Assertをやるには","date":"September 21, 2014","description":null}},"previous":{"fields":{"slug":"posts//2014/09/05/arel/"},"frontmatter":{"title":"Arelあれこれ"}},"next":{"fields":{"slug":"posts//2014/11/27/spotlights-jp/"},"frontmatter":{"title":"spotlights.jpが本日10時にリリースされました"}}},"pageContext":{"id":"5bcbeb8c-b027-5a7c-8a40-153e5b3fdb14","previousPostId":"829a39f7-f7e6-5e15-84fd-de16e83389e5","nextPostId":"8314b733-2a98-5027-98ef-2192f0eb4021"}},"staticQueryHashes":["2841359383"]}