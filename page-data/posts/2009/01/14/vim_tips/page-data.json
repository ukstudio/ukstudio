{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2009/01/14/vim_tips/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"28d2edc6-0055-5ab9-b3cd-ecfc10feff81","excerpt":"適当に思い付いたものを書いてみる。 以下、自分のvimrcで「n CTRL-X CTRL-L」した例。  ちなみに俺がこれを一番使うときはRSpecのdescribeの行を補完する時かな。こんな感じ。 んで、hでちょこちょこっと”の中に移動してdi”で”の中を削除する感じ。 hogeのところでgfするとhoge.rb…","html":"<p>適当に思い付いたものを書いてみる。</p>\n<h2>CTRL-X CTRL-L</h2>\n行単位での補完。まぁ該当の行でyyしてpして貼り付けでもいいかもしれないけど、移動するの面倒な場合もあるし。\n<p>以下、自分のvimrcで「n CTRL-X CTRL-L」した例。</p>\n<p><a href=\"http://ukstudio.jp/wp-content/uploads/2009/01/c-xc-l.jpg\"><img src=\"http://ukstudio.jp/wp-content/uploads/2009/01/c-xc-l.jpg\" alt title=\"c-xc-l\" width=\"300\" height=\"234\" class=\"alignnone size-medium wp-image-294\"></a></p>\n<p>ちなみに俺がこれを一番使うときはRSpecのdescribeの行を補完する時かな。こんな感じ。</p>\n<pre lang=\"ruby\">\ndescribe \"hogehoge\" do\nend\n\ndesCTRL-X CTRL-L\n↓\ndescribe \"hogehoge\" do\n</pre>\n<p>んで、hでちょこちょこっと”の中に移動してdi”で”の中を削除する感じ。</p>\n<h2>di\"</h2>\nこっそり上で登場してるけど\"で囲まれた文字列をd(削除)する。da\"だと\"も含めて削除。ちなみにこれはテキストオブジェクトっていうVim7からの機能で他にも色々パターンがあって、個人的にVimの機能の中でも特別気に入っている。ちゃんと説明すると長いのでいくつか例だけ示す。\n<dl>\n<dt>di\"</dt>\n<dd>\"の中を削除</dd>\n<dt>da\"</dt>\n<dd>\"も含めて削除</dd>\n<dt>yi\"</dt>\n<dd>\"の中をコピー</dd>\n<dt>ya\"</dt>\n<dd>\"も含めてコピー</dd>\n<dt>di(</dt>\n<dd>()の中を削除</dd>\n<dt>da(</dt>\n<dd>()も含めて削除</dd>\n<dt>di{</dt>\n<dd>{}の中を削除</dd>\n<dt>da{</dt>\n<dd>{}も含めて削除</dd>\n</dl>\n<h2>gf</h2>\nカーソル以下のファイル名を開いてくれる。requireやinclude、ファイルをオープンしたりする処理のところで便利。\n<pre lang=\"ruby\">\nrequire \"hoge\"\n</pre>\n<p>hogeのところでgfするとhoge.rbを開く。</p>\n<h2>CTRL-AとCTRL-X</h2>\nVimM#3でamachangが感動してた気がする。カーソル以下の数字をインクリメントとデクリメントしてくれる。ちゃんと1000とかも1001や999にしてくれるよ。マクロで多用するかも。\n<h2>guuとgUUと~</h2>\nguuはカーソル行の文字を全部小文字に、gUUは全部大文字に。~はカーソル以下の文字を小文字なら大文字に、大文字なら小文字に。\n<p>書いといてなんだけどあまり使った記憶ないな、これ。</p>\n<h2>:!</h2>\n:!を使うと外部コマンドを叩くことができる。単体だと結果を返すだけなので頭に.(ドット)を付けて結果を挿入したりする。単体で使うときはlsの結果を見るときが多いかも。一々screenのウィンドウを移動しなくて済む。なんか段々書くのが面倒になってきたので例で示す。\n<p><strong>追記</strong>: kanaさんより指摘がありました。挿入はr!〜ですね。</p>\n<blockquote>\n> 単体だと結果を返すだけなので頭に.(ドット)を付けて結果を挿入したりする。\n嘘。:{range}!{cmd}はフィルタリング。結果的にそうなるケースはあるけれど意味は違う。本当に挿入するなら:r!{cmd} (:read !{cmd})。\n</blockquote>\n<dl>\n<dt>:!ls ~</dt>\n<dd>ls ~の結果が表示される</dd>\n<dt>:.!date </dt>\n<dd>date結果が挿入される</dd>\n<dt>:%!sort</dt>\n<dd>今開いてるファイルをsortした結果に書き変わる</dd>\n<dt>:%!grep hoge</dt>\n<dd>hogeが含む行だけに書き変わる</dd>\n<dt>:!ruby -c %</dt>\n<dd>今開いてるファイルをrubyの構文チェックに通す。PHPとかでも似たようなことができる</dd>\n</dl>","frontmatter":{"title":"覚えとくと便利かもしれないVimのTips","date":"January 14, 2009","description":null}},"previous":{"fields":{"slug":"posts//2009/01/09/rspec_result_output_html/"},"frontmatter":{"title":"RSpecの結果をHTMLで出力する方法"}},"next":{"fields":{"slug":"posts//2009/02/24/file_column_name_error/"},"frontmatter":{"title":"Rails2.0.2から2.2.2に上げたらFileColumnがNameErrorだした。"}}},"pageContext":{"id":"28d2edc6-0055-5ab9-b3cd-ecfc10feff81","previousPostId":"d5843571-1b09-586c-84f5-62850628ab94","nextPostId":"c8cdac07-9010-504b-a516-ce1b13754e02"}},"staticQueryHashes":["2841359383"]}