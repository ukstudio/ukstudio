{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2009/04/20/cucumber/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"ad085b90-ac92-5317-a6a8-5a3d0186e792","excerpt":"ちょっと大げさなタイトルかもしれないですが、個人的にはそれぐらいの感動。「これで勝つる!」な気分。何に勝つのか知らないけれど。 今までのRailsのテストはもっぱらRSpec…","html":"<p>ちょっと大げさなタイトルかもしれないですが、個人的にはそれぐらいの感動。「これで勝つる!」な気分。何に勝つのか知らないけれど。</p>\n<p>今までのRailsのテストはもっぱらRSpecで書いてて、確かにこれはこれで素晴らしい。採用当初はバグが減ってその時も「これで勝つる!」な気分でした。でもやっぱり受け入れテストがネックになるんですよね。Seleniumとかも使ったりしてましたけど、ブラウザががちゃがちゃ動くし、なんとなく面倒で結局手動で確認という感じになってしまいました。</p>\n<p>そこでCucumberの登場ですよ。個人的に素晴しいと思うのは</p>\n<ul>\n<li>テストケースが自然文(っぽい)</li>\n<li>そんなに邪魔じゃない</li>\n</ul>\n<p>あたりかなぁ。テストケースが自然文っぽいというのは実はかなり大事で例えば</p>\n<blockquote>\nお客さん: まずトップページにアクセスするとログインフォームがあって、そこにログインすると「ようこそ!ほげほげさん」と出すようにして欲しい\n</blockquote>\n<p>っていう要望、つまりユーザーストーリがあった場合に割とそのままシナリオとしてテストに変換できる。</p>\n<pre lang='ruby'>\nもし トップページ にアクセス\nかつ メールアドレス に hogehoge@hoge.com と入力\nかつ パスワード に hogehoge と入力\nかつ ログイン ボタンを押す\n\nならば ようこそ!ほげほげさん と表示されること\n</pre>\n<p>これは疑似言語とかじゃなくて、これがそのままテストとして実行できる。つまり今までこっちがブラウザをポチポチしてお客さんに「できましたー(多分)」と報告していて、お客さんからすると何をどうテストしていたのかが曖昧という問題があったのだけれど、 Cucumberだと<strong>お客さんと一緒に受け入れテストを作ることができて、そのテストケースもお客さんが読むことができる</strong>から曖昧さが消えて安心が生まれる。</p>\n<p>もちろん開発者にもメリットはあって、Cucumberはユーザ視点レベルのテストだからテストとしては一番外側なテストでここのテストがちゃんと通っていれば、アプリケーションの動作がユーザ視点での正しく動くという保証ができるわけです。</p>\n<p>その保証ができるとどうなるかと言うと、極端な話、ユーザ視点での動作が正しければ内部の動作なんて割とどうでもいいわけで、内部に自由がでてきます。内部に自由がでてくると、コードの修正や設計の変更が怖くなくなり、リファクタリングがしやすくなります。結果、メンテのしやすいアプリが出来上がります。</p>\n<p>Cucumberは残念なことに、Ajaxのテストができないのでその辺りはSeleniumや手動での確認、あとはjsonやxmlを吐き出すアクションをRspecでテストするなど臨機応変に対応する必要がありそうです。</p>\n<p>最後にオマケですが、僕が実際にCucumberを使ったときの開発の流れをば。</p>\n<ul>\n<li>Cucumberのシナリオを書く</li>\n<li>Rspecでモデルのテストを書く</li>\n<li>モデルにロジックを書く</li>\n<li>Rspecでコントローラとビューのテストを書く</li>\n<li>コントーラとビューを書く</li>\n<li>Cucumberのテストが通ったのを確認して、実際に手動でも確認する</li>\n<li>それぞれのテストをautotestとかでまわしながらリファクタリング</li>\n</ul>\n<p>まず最初にCucumberのシナリオを書きます。仕様のブレを防ぐためです。この時点では当然Cucumberのテストは通りませんが、とりあえずモデルからビューにかけてボトムアップでコードを書きます。基本的にテストファーストです。</p>\n<p>ビューまで書いたらこの時点でCucumberのテストが通っていれば手動で確認、通っていなければ同じ要領でテストファーストでコードを書きます。</p>\n<p>最後に今まで書いたテストが落ちないようにリファクタリングを行います。ここまでで1つのユーザストーリ(Cucumberでいうフィーチャ)の実装が完了します。</p>\n<p>CucumberはRspecの時もそうでしたが、新しく導入するときにどうしてもコストがかかります。でも慣れてくればそのコストは大分減りますし、stepもある程度使いまわせるものが多いので長期的に見れば逆にコストが減ると思っています。個人的にはCucumberを採用しない理由はないと思うので、この記事を読んでいる人も是非試してみてください。</p>","frontmatter":{"title":"Cucumberの登場でRailsのテスティング環境が変わった","date":"April 20, 2009","description":null}},"previous":{"fields":{"slug":"posts//2009/04/20/atmarkit_1986/"},"frontmatter":{"title":"@ITの86世代の記事に載りました"}},"next":{"fields":{"slug":"posts//2009/04/28/vim_hacks_project/"},"frontmatter":{"title":"Vim Hacks Projectはじめました"}}},"pageContext":{"id":"ad085b90-ac92-5317-a6a8-5a3d0186e792","previousPostId":"59d87436-b6b2-5372-8ccf-03140970421b","nextPostId":"ac78add8-9921-5131-92ab-2d6f47c611db"}},"staticQueryHashes":["2841359383"]}