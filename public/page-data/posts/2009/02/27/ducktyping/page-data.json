{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2009/02/27/ducktyping/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"7fd644ed-e106-5df2-8ebd-4188e72fb29c","excerpt":"今日、知人に「DuckTypingのメリットが今一ピンとこない」と言われて実際にコード書いて説明をしたのだけれども、せっかくなのでエントリにまとめる。 DuckTyping…","html":"<p>今日、知人に「DuckTypingのメリットが今一ピンとこない」と言われて実際にコード書いて説明をしたのだけれども、せっかくなのでエントリにまとめる。</p>\n<p>DuckTypingとは、動的言語の柔軟性を表現する概念で以下の格言に由来する。</p>\n<blockquote>\n    \"If it walks like a duck and quacks like a duck, it must be a duck\"\n（もしもそれがアヒルのように歩き、アヒルのように鳴くのなら、それはアヒルである）\n</blockquote>\n<p>つまり、アヒルのように振る舞うものは、実際にそれが何であろうとアヒルと見なすということになる。</p>\n<p>もうちょっと言語よりな言い方をするのであれば、あるオブジェクトどのクラスに属するか考慮せず、どのようなインターフェースを持つかに注目するのがDuckTyping。</p>\n<p>DuckTypingにおいて重要なことは「明示的な型チェックを避ける」と言うことで、どう言うことかと言うと</p>\n<script src=\"http://gist.github.com/70902.js\"></script>\n<p>上記のようなコードを書いてしまうと、Duckクラスもしくはそれらを継承したクラスしか扱えなくなり、動的言語のメリットが失われてしまう。</p>\n<p>その知人に紹介した簡単なDuckTypingの例が以下。</p>\n<script src=\"http://gist.github.com/70734.js\"></script>\n<p>ここではwriteメソッドさえあれば、渡されたオブジェクトが何かは問わない。これをもうちょっと実際に使うようなコードに書き直すと以下のようになる。</p>\n<script src=\"http://gist.github.com/70911.js\"></script>\n<p>やっていることは、ほとんどwrite_messageと同じだけど、こちらの方がまだピンとくると思う。Loggerはログを書き出すだけの簡単なクラスだが、DuckTypingを用いることによって、その書き出し先を柔軟に変更することができる。</p>\n<p>実際はどんなオブジェクトが渡されるかわからないのでrespond_to?でメソッドの有無のチェックぐらいはした方がいい。</p>\n<script src=\"http://gist.github.com/70918.js\"></script>\n<p>エラー処理をもうちょっと別の方法を取ってみる。</p>\n<script src=\"http://gist.github.com/70969.js\"></script>\n<p>こちらの方法を取ると、仮に呼び出したメソッド内で例外が発生した場合もうまく処理することができる。個人的には大体こちらの手段を取ることが多い。</p>\n<p>結構長くなったけど、大体こんな感じ。DuckTypingは慣れない人からするとよくわからないところも多いと思うけど、うまく使えれば結構便利な機能。使いすぎは禁物だけどうまく使っていくといいだろう。</p>","frontmatter":{"title":"RubyでDuckTyping","date":"February 27, 2009","description":null}},"previous":{"fields":{"slug":"posts//2009/02/24/file_column_name_error/"},"frontmatter":{"title":"Rails2.0.2から2.2.2に上げたらFileColumnがNameErrorだした。"}},"next":{"fields":{"slug":"posts//2009/04/06/vim_mtl/"},"frontmatter":{"title":"Vim勉強会 in MTLで話してきました"}}},"pageContext":{"id":"7fd644ed-e106-5df2-8ebd-4188e72fb29c","previousPostId":"c8cdac07-9010-504b-a516-ce1b13754e02","nextPostId":"8d7977e8-667e-5adc-89bf-b0ce181dc7c4"}},"staticQueryHashes":["2841359383"]}