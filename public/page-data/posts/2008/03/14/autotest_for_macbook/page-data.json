{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2008/03/14/autotest_for_macbook/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"d5ccfac7-bdfe-5e57-8f8b-dce0433e83b4","excerpt":"なんかautotestが流行りつつある今日この頃ですが、みなさまいかがお過ごしでしょうか。とりあえず丁度うちの会社でも自動テストしようかーみたいな話がでてたので構築してみましたよ! 次にautotestの設定ファイルの作成。exampledotautotest.rb…","html":"<p>なんかautotestが流行りつつある今日この頃ですが、みなさまいかがお過ごしでしょうか。とりあえず丁度うちの会社でも自動テストしようかーみたいな話がでてたので構築してみましたよ!</p>\n<h2>ZenTestのインストール</h2>\nとりあえずは定番のZenTest(autotest)とRedGreen(結果の色付け)をインストールします。\n<pre lang=\"bash\">\n$ sudo gem install ZenTest\n$ sudo gem install RedGreen\n</pre>\n<p>次にautotestの設定ファイルの作成。example<em>dot</em>autotest.rbのパスは人によって違うと思うので適当に読み替えてください。</p>\n<pre lang=\"bash\">\ncp /opt/local/lib/ruby/gems/1.8/gems/ZenTest-3.9.1/example_dot_autotest.rb ~/.autotest\n</pre>\n<p>~/.autotestの15行目のコメントアウトを解除。</p>\n<pre lang=\"ruby\">\nrequire 'autotest/redgreen'\n</pre>\n<p>RAILS_ROOTでautotestを実行。起動時に全部のテストを実行するのでちょっとだけ重くなるかもしれません。それ以降はテストファイルやモデル、コントローラファイルなどを修正する度に該当のテストが走ります。</p>\n<pre lang=\"bash\">\n$ cd RAILS_ROOT\n$ autotest\n</pre>\n<p>実行するテストはtest/unit、もしくはRailsにRSpecが入れてあればRspecのテストを実行します。</p>\n<p>なんかspec_serverを立ち上げておくと処理が早くなるらしいですがよくわかってないです。まぁとりあえず設定しといて損はなさそうです。</p>\n<pre lang=\"bash\">\n$ vi spec/spec.opts # 最下行に --drb を追記。drbでテスト用サーバへ繋ぐようになります。\n$ ruby script/spec_server\n</pre>\n<p>テストの結果は成功なら緑色のバーが、失敗なら赤色のバーが表示されます。</p>\n<h2>結果通知用にGrowlとScreenの設定をする</h2>\n<p>これでも自動テストは走るので問題ないですが、結果を見るのがちょっと面倒ですね。ということでGrowlとScreenで結果が見えるようにしましょう。</p>\n<p>screenの場合は<a href=\"http://kakutani.com/20070912.html#p02\">角谷さんのエントリーを</a>見るといいと思います。基本的にそのまま~/.autotestにコピペするだけで問題ないはずです。</p>\n<pre lang=\"ruby\">\nrequire 'autotest/screen'   # コメントアウトを外す\n\nAutotest::HOOKS.delete(:interrupt)\nAutotest::Screen.statusline = %q[|%c %m/%d|%w %=]\n\nclass Autotest::Screen\n  SCREEN_COLOR[:green] = 'gw'\n  SCREEN_COLOR[:yellow] = 'yk'\n\n  Autotest.add_hook :run_command do |at|\n    message 'Running' if execute?\n  end\n\n  Autotest.add_hook :quit do |at|\n    clear if execute?\n  end\n\n  Autotest.add_hook :ran_command do |at|\n    return unless execute?\n    results = [at.results].flatten.join(\"¥n\")\n    output = results.slice(/(¥d+)¥sexamples?,¥s*(¥d+)¥s.*failures?(?:,¥s*(¥d+)¥s.*pendings?)?/)\n    if output\n      ex,fail,pend = $~.captures.map {|e| e.to_i}\n      if 0 < fail\n        message \"FAIL #{ex}ex, F:#{fail} \", :red\n      elsif 0 < pend\n        message \"Pend #{ex}ex, F:#{fail} P:#{pend}\", :yellow\n      else\n        message \"All Green #{ex}ex\", :green\n      end\n    end\n  end\nend\n</pre>\n<p>この設定でscreenとautotestを起動しておくと、ステータスバーの右側にテストの結果が表示されます。</p>\n<img src=\"http://img.skitch.com/20080314-d6gq6bsmbbxh99ynx349bfcckf.jpg\" alt=\"autotest\">\n<p>これ貼ってから気づいたけど、Terminalから透けてみえる絵がなんかあれですなw</p>\n<p>次にGlowlの設定ですが、Leopardではruby-growlのインストールが必要っぽいです。とりあえずmacportsからインストールしておきましょう。それとGrowlの設定でリモートを許可しておきましょう。</p>\n<pre lang=\"bash\">\n$ sudo port install ruby-glowl\n</pre>\n<img src=\"http://img.skitch.com/20080314-r92e97nip77qfj7u4p2a1ch8e6.jpg\" alt=\"Growl\">\n<p>Growlで結果を通知するにはgrowlnotifyのインストールが必要です。もしインストールしていなければ<a href=\"http://growl.info/\">本家</a>からdmgファイルをDLし、その中にあるinstall.shを実行します。</p>\n<pre lang=\"bash\">\n$ cp -r /Volumes/Growl\\ 1.1.2/Extras/growlnotify ~/tmp\n$ cd ~/tmp/growlnotify\n$ sudo ./install.sh\n$ growlnotify -m \"hoge\" # growlの通知が表示されればインストール完了\n</pre>\n<p>~/.autotestを修正し、glowlで結果が通知されるようにします。</p>\n<pre lang=\"ruby\">\nrequire 'autotest/glowl' # コメントアウトを解除\n</pre>\n<p>これでテストが失敗したとき、失敗から成功になったときにGrowlが通知してくれます。Growlの見た目を変更しようと思ったけれど、個人的にscreenだけで十分だったので今回はナシ。</p>\n<p>とりあえず自動テストはテストを書くのが楽しくなりますな。オススメ。</p>","frontmatter":{"title":"MacBookにRailsの自動テスト環境を構築した","date":"March 14, 2008","description":null}},"previous":{"fields":{"slug":"posts//2008/03/04/from_unittest_to_rspec/"},"frontmatter":{"title":"test/unitで書いたテストにRSpecでテストを追記する方法"}},"next":{"fields":{"slug":"posts//2008/05/27/rawhide-designer/"},"frontmatter":{"title":"RAWHIDE.ではデザイナを募集しています。"}}},"pageContext":{"id":"d5ccfac7-bdfe-5e57-8f8b-dce0433e83b4","previousPostId":"76911e71-f2ff-5b20-b3db-0dca9a50539f","nextPostId":"231d7ea9-1f5c-5358-ab73-738e4cb714ba"}},"staticQueryHashes":["2841359383"]}