{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2008/02/27/haskell_sec3/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"8484f948-6a27-5b9d-bf89-8a9269658eb2","excerpt":"Haskellの型には、Int(整数値)、Char(文字)、String(文字列)、Bool(真偽値)がある。Intは最低30ビット幅の符号付き整数値を意味する。CharやStringで扱う文字(列)のエンコードにはUnicodeを採用しているが、GHC…","html":"<h2>型と値</h2>\nHaskellには<strong>型推論</strong>という機能がある。型推論は処理系の方で型を推測し、<strong>矛盾なく全ての式が型づけできればコンパイル時にエラーにはならない</strong>。Haskell以外にも、OCaml、Scala、MLなど静的型付け関数型言語のほとんどが型推論の機能を供えている。\n<p>Haskellの型には、<strong>Int(整数値)、Char(文字)、String(文字列)、Bool(真偽値)</strong>がある。Intは最低30ビット幅の符号付き整数値を意味する。CharやStringで扱う文字(列)のエンコードにはUnicodeを採用しているが、GHCの実装は中途半端で入出力でのエンコーディング変換などが実装されていない。</p>\n<p>また、Int型のリスト、Char型のリストと言う風にリストの型を表現し、Int型のリストの各要素はInt型になる。<strong>ソースコード上では[Int]や[Char]と書く</strong>。文字列は文字のリストなので[Char]ということになり、別名として上記したString型が用意されている。</p>\n<p>関数の型をは引数の型と返り値の型を組合せて表現する。例えば、<strong>String -> [String]というのは第1引数の型がString(文字列)で、返り値の型が<a href=\"%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88\">String</a>となる</strong>。</p>\n<pre lang=\"haskell\">\n第1引数の型 -> 第2引数の型 -> ・・・ -> 返り値の型\n</pre>\n<p>では、引数の型が決まっていない場合どうするのかと言うと、<strong>型変数</strong>と言うものを使う。型変数はアルファベット小文字であらわし、アルファベット小文字の部分は好きな型に読み替えてよい。</p>\n<pre lang=\"haskell\">\n[a] -> Int\nInt -> [a] -> [a]\n</pre>\n<p>上記の場合だと、1行目は任意の型のリストを引数にもち、Intを返す関数。2行目はIntを第1引数、任意の型のリストを第2引数にもち、第2引数と同じ型のリストを返す関数という意味になる。</p>\n<p><strong>関数の型を宣言</strong>するには、先程関数の型を表現したものに少し付け足せばいい。Haskellは型推論の機能をもつので必ずしも型の宣言が必要というわけではないが、なるべく宣言しておくのが好ましい。</p>\n<pre lang=\"haskell\">\n関数名 :: 第1引数の型 -> 第2引数の型 -> ・・・ -> 返り値の型\n</pre>\n<h2>高階関数</h2>\n高階関数とは<strong>引数に関数をとる関数</strong>のこと。\n<pre lang=\"haskell\">\nmain = do cs < - getContents\n          putStr $ expand cs\n\nexpand :: String -> string\nexpand cs = map translate cs\n\ntranslate :: Char -> Char\ntranslate c = if c == '\\t' then '@' else c\n</pre>\n<p>このプログラムでは5行目で高階関数のmap関数が使われている。map translate csと言うのは、<strong>translate関数そのものにmapを適用しているのであって、translateの結果にmapを適用しているわけではない</strong>。</p>\n<p>mapの型は</p>\n<pre lang=\"haskell\">\nmap :: (a -> b) -> [a] -> [b]\n</pre>\n<p>となっており、<strong>(a -> b)は「a型の値を引数にとりb型の値を返す関数」</strong>を意味する。今回の場合だと、translate関数の型が Char -> Char となっているので、「Char型の値を引数にとりChar型の値を返す関数」と読み替えることができる。更にいうと(a -> b) -> [a] -> [b] は (Char -> Char) -> [Char] -> [Char]となる。</p>\n<pre lang=\"haskell\">\nmain = do cs < - getContents\n          putStr $ expand cs\n\nexpand :: String -> String\nexpand cs = concat $ map expandTab cs\n\nexpandTab :: Char -> String\nexpandTab c = if c == '\\t' then \"        \" else [c]\n</pre>\n<p>この辺はちょっとややこしくなってくるが、ちゃんと順に考えていけば問題ない。</p>\n<h2>パターンマッチ(1)</h2>\n<pre lang=\"haskell\">\ntabStop = 8\n\nmain = do cs < - getContents\n          putStr $ expand cs\n\nexpand :: String -> String\nexpand cs = concatMap expandTab cs\n\nexpandTab :: Char -> String\nexpandTab '\\t' = replicate tabStop ' '\nexpandTab c = [c]\n</pre>\n<p>個人的にtabStopがグローバル変数みたいでなんか気持ち悪い。定数と考えればいいのかな。まぁ今はとりあえず置いておこう。</p>\n<p>今回のプログラムの最後2行で<strong>パターンマッチ</strong>を使用している。下から2行目が引数が「\\t」の時に使われる定義。最後の行は仮引数が使われているので、「どんな値」にもマッチする。<strong>パターンマッチは上に書いたものが優先され、マッチするパターンが無い場合には実行時にエラーが発生する</strong>。</p>\n<pre lang=\"haskell\">\n関数名 第1引数のパターン 第2引数のパターン ・・・・ = 定義1\n関数名 第1引数のパターン 第2引数のパターン ・・・・ = 定義2\n関数名 第1引数のパターン 第2引数のパターン ・・・・ = 定義3\n</pre>\n<h2>パターンマッチ(2)</h2>\n<pre lang=\"haskell\">\nmap :: (a -> b) -> [a] -> [b]\nmap f []     = []\nmap f (x:xs) = f x : map f xs\n</pre>\n<p>2行目のパターンマッチは空リストに一致する。つまりmapの第2引数が[]だった場合、必ず[]を返すと言うことになる。</p>\n<p>3行目の(x:xs)もリストに対するパターンで、空リスト以外のリストにマッチする。<strong>リストの最初の要素がxに束縛され、残りの要素がxsに束縛される</strong>。まぁSchemeのcarやcdrみたいなものかな。</p>\n<p>3行目での定義ではまたさらにmapを適用している。つまり、<strong>再帰を用いて処理している</strong>。Haskellには<strong>ループを扱う構文は存在しない</strong>為である。</p>\n<pre lang=\"haskell\">\nmap length [\"abc\", \"de\", \"f\"]\n  length \"abc\" : map length [\"de\", \"f\"]\n    length \"de\" : map length [\"f\"]\n      length \"f\" : map length []\n      (1 : [])\n    (2 : [1])\n  (3:[2,1])\n[3, 2, 1]\n</pre>\n<p>例えば「map length [“abc”, “de”, “f”」だと多分こんな感じ。<strong>「:」演算子はリストを生成する演算子で(y:ys)ならリストysの先頭に要素yを追加する</strong>。</p>\n<h2>練習問題</h2>\n<pre lang=\"haskell\">\nmain = do cs < - getContents\n          putStr $ swapa cs\n<p>swapa :: String -> String\nswapa cs = map replaceA cs</p>\n<p>replaceA :: Char -> Char\nreplaceA ‘a’ = ‘A’\nreplaceA ‘A’ = ‘a’\nreplaceA c = c</p>\n</pre>\n<p>とりあえず動く。</p>\n<h2>追記(08/02/27)</h2>\n<pre lang=\"haskell\">\nmain = do cs < - getContents\n          putStr $ map swapa cs\n<p>swapa :: Char -> Char\nswapa ‘a’ = ‘A’\nswapa ‘A’ = ‘a’\nswapa c = c</p>\n</pre>\n<p>書き直した。この方が短い。</p>","frontmatter":{"title":"ふつケル第3章","date":"February 27, 2008","description":null}},"previous":{"fields":{"slug":"posts//2008/02/25/haskell_sec2/"},"frontmatter":{"title":"ふつケル第2章"}},"next":{"fields":{"slug":"posts//2008/03/01/rawhide/"},"frontmatter":{"title":"RAWHIDE.入社のお知らせ"}}},"pageContext":{"id":"8484f948-6a27-5b9d-bf89-8a9269658eb2","previousPostId":"6357969e-b5fc-5b17-8a4e-491eb5bd7b04","nextPostId":"13e396ee-d098-5732-9de7-e2a17a3e229e"}},"staticQueryHashes":["2841359383"]}