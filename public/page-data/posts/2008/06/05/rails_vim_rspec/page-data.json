{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2008/06/05/rails_vim_rspec/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"e72e17b0-f5be-5da5-a663-6e8aad2af2de","excerpt":"rails.vimをインストールすると、RcontrollerとかRmodelコマンドでRSpecファイルからControllerやModelファイルに切り替えることができるんだけど、その逆ができないので対応させた。仮なのはVimスクリプトをちゃんと書けなくてコピペのごまかしだから。 書きかえるファイルは~/.vim…","html":"<p>rails.vimをインストールすると、RcontrollerとかRmodelコマンドでRSpecファイルからControllerやModelファイルに切り替えることができるんだけど、その逆ができないので対応させた。仮なのはVimスクリプトをちゃんと書けなくてコピペのごまかしだから。</p>\n<p>書きかえるファイルは~/.vim/autoload/rails.vim。一応行数も書いたけどもしかしたらズレてるかもしれないので参考程度に。あと、バージョンは2.0使ってる。</p>\n<p>まずは、:Rspec、:Rspeccontroller、:Rspecmodelを呼び出せるようにする。</p>\n<pre lang=\"vim\">\n1777   call s:addfilecmds(\"integrationtest\")\n1778   call s:addfilecmds(\"spec\")\n1779   call s:addfilecmds(\"speccontroller\")\n1780   call s:addfilecmds(\"specmodel\")\n1781   call s:addfilecmds(\"stylesheet\")\n</pre>\n<p>なんでわざわざ3つあるのかと言うと、「:Rspec hoge」ってやった時にControllerのスペックなのか、Modelのスペックなのか判断する方法がわからなかったから。だからとりあえず「:Rspec」とやったときは、今開いているファイルに対応するスペックファイルを開き、個別に指定して開きたいときは「:Rspeccontroller hoge」もしくは「:Rspecmodel hoge」で明示的にControllerかModelかを指定するようにした。</p>\n<p>次に「:Rspeccontroller [tab]」や「:Rspecmodel [tab]」としたときに、スペック名を補完できるようにfunctionを追加する。</p>\n<pre lang=\"vim\">\n1941 function! s:speccontrollerList(A,L,P)\n1942   return s:autocamelize(s:relglob(\"spec/controllers/\",s:recurse,\"_controller_spec.rb\"),a:A)\n1943 endfunction\n1944\n1945 function! s:specmodelList(A,L,P)\n1946   return s:autocamelize(s:relglob(\"spec/models/\",s:recurse,\"_spec.rb\"),a:A)\n1947 endfunction\n</pre>\n<p>最後に実際にファイルを開く部分。2331、2334、2340、2345の”spec”、“speccontroller”、“specmodel”が最初に設定したaddfilecmdsの引数と対応するっぽい。なのでfunction名はなんでもいいと思うけど、とりあえず他のに合わせた。</p>\n<p>specEditは「:Rspec」に対応していて、開いたファイルがControllerかModelかで開くスペックファイルもかわる。speccontrollerEditとspecmodelEditはControllerかModelどちらか決まったものしか開かない。</p>\n<pre lang=\"vim\">\n2328 function! s:specEdit(bang,cmd,...)\n2329   if s:model() != ''\n2330     let f = s:model()\n2331     return s:EditSimpleRb(a:bang,a:cmd,\"spec\",f,\"spec/models/\",\"_spec.rb\")\n2332   else\n2333     let f = s:controller()\n2334     return s:EditSimpleRb(a:bang,a:cmd,\"spec\",f,\"spec/controllers/\",\"_controller_spec.rb\")\n2335   endif\n2336 endfunction\n2337\n2338 function! s:speccontrollerEdit(bang,cmd,...)\n2339   let f = s:controller()\n2340   return s:EditSimpleRb(a:bang,a:cmd,\"speccontroller\",f,\"spec/controllers/\",\"_controller_spec.rb\")\n2341 endfunction\n2342\n2343 function! s:specmodelEdit(bang,cmd,...)\n2344   let f = s:model()\n2345   return s:EditSimpleRb(a:bang,a:cmd,\"specmodel\",f,\"spec/models/\",\"_spec.rb\")\n2346 endfunction\n</pre>\n<p>とりあえず、現状の設定で簡易的にRSpecに対応させることができる。「:Rspec」の存在が気持ち悪いのであれば、それは消して開いているファイルがControllerかModelか自分で判断して「:Rspeccontroller」か「:Rspecmodel」を使いわければいいと思う。「:Rspec [tab]」でエラーが出るし個人的には気持ちわるいんだけど、対応させたスペックを開くことの方がおおいし、その時は短いコマンドの方が都合がいいのでここらへんは妥協。今回Viewには対応させていないけれど、同じ要領でできるはず。</p>\n<p>rails.vimを少しよんだだけだし、実際の動作もまともに検証してないので変な動作したらごめんなさい。まぁ致命的な問題は起きないだろうけど。正式にrails.vimがRSpecに対応してくれるといいんだけどね。</p>","frontmatter":{"title":"rails.vimのファイル切り替えをRSpecに対応させる(仮)","date":"June 05, 2008","description":null}},"previous":{"fields":{"slug":"posts//2008/06/04/rails_for_beginner/"},"frontmatter":{"title":"RE:Rails初心者はどうやって他人のRailsコードを読めばいいか"}},"next":{"fields":{"slug":"posts//2008/06/13/rails2_1min/"},"frontmatter":{"title":"Ruby on Rails 2.0アプリを10秒で作る2.0"}}},"pageContext":{"id":"e72e17b0-f5be-5da5-a663-6e8aad2af2de","previousPostId":"2e32a1f3-b272-5dba-a71d-e7ea4bf7c82a","nextPostId":"b3a5c4f4-e2f9-5bb0-af86-9aaf07501bde"}},"staticQueryHashes":["2841359383"]}