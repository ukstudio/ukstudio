{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2007/07/16/070714_js/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"be263fbb-023a-5ad3-bc93-c671768ec6bb","excerpt":"とある理由で僕主催の初心者向けのJavaScript勉強会 を14日行いました。とある理由はforestkさんのエントリーを参照ください(UK 主催の初心者向け Javascript…","html":"<p>とある理由で僕主催の初心者向けのJavaScript勉強会 を14日行いました。とある理由はforestkさんのエントリーを参照ください(<a href=\"http://blog.livedoor.jp/forestk/archives/50357381.html\">UK 主催の初心者向け Javascript 勉強会が生まれた経緯</a>)</p>\n<p>会場は<a href=\"http://www.knocking.co.jp/\">株式会社ノッキングオン</a>様にご提供いただきました。借りたい人ははてなキーワードの<a href=\"http://d.hatena.ne.jp/keyword/%A5%CE%A5%C3%A5%AD%A5%F3%A5%B0%A5%AA%A5%F3%A4%CE%B2%F1%B5%C4%BC%BC%BB%C8%A4%A4%A4%BF%A4%A4%21\">ノッキングオンの会議室使いたい!</a>を利用するといいと思います。東麻布でプロジェクター &#x26; ネット環境あり(優先ですがアクセスポイントを持参すれば無線も利用可能みたいです)の好環境ですのでかなりおすすめの物件となっております:-P</p>\n<p>資料を公開しますので参考になれば幸いです。といっても、ほとんど入門書に書いてあるようなことですがwしかもif文とかの説明すげー適当だしね!</p>\n<p>資料URL : <a href=\"http://www.slideshare.net/ukstudio/javascript/11\">http://www.slideshare.net/ukstudio/javascript/11</a></p>\n<p>質問されたり、資料が半端な出来だったりしたのでちょっといくつか補足しておきます</p>\n<h2>補足1:連想配列とオブジェクト</h2>\n連想配列とオブジェクトの違いはなにか?みたいな質問を受けたので簡単にお答えします。結論としてその２つに<strong>違いはない</strong>と僕は考えます。下のコードをみてください。\n<pre lang=\"javascript\">\nvar obj = {\n  name : \"UK\",\n  age : 20,\n  birthday : \"12月14日\"\n}\n<p>alert(obj.name);       //UK\nalert(obj[“name”]); //UK</pre>\n1つ目のalertは資料でも説明したプロパティの呼び出しです。2つ目に注目してください。連想配列と同じ呼び出し方をしてますよね。今度は次のコードをみてください。</p>\n<pre lang=\"javascript\">\nvar array = new Array();\narray[\"name\"] = \"UK\";\narray[\"age\"] = 20;\narray[\"birthday\"] = \"12月14日\";\nalert(array[\"name\"]);  //UK\nalert(array.name);        //UK</pre>\n<p>上記のように連想配列でもドットシンタックス(.)を使って値を呼び出すことができます。これでなんとなくは連想配列とオブジェクトに違いはないと言った意味がわかってもらえたんじゃないでしょーか。</p>\n<p>結局は連想配列もオブジェクトの一種(Arrayオブジェクト)なので元をたどっていけばもっとも基本的なオブジェクト(Objectオブジェクト)に行き着くってことです。これはArrayオブジェクトに限らず他のオブジェクト(DateオブジェクトとかFunctionオブジェクトとか)も最終的にはObjectオブジェクトに行き着きます。Objectオブジェクトがすべてのオブジェクトの出発点なのです。</p>\n<p>ちょっとおまけですが、連想配列ではなく普通の配列を空のオブジェクトから作ってみます。</p>\n<pre lang=\"javascript\">\nvar array = {\n  0 : \"インデックス0\",\n  1 : \"インデックス1\",\n  2 : \"インデックス2\"\n}\n\nalert(array[0]);     //インデックス0\nalert(array.0);           //エラー</pre>\n<p>とまぁ、こんな感じでプロパティのラベルに数値でつけてやれば配列のようなオブジェクトができます。あとはlengthプロパティだとかをつけてやればOKですね(どうやってプロパティの数を求めるんだとかは聞かないでね)</p>\n<p>ただ、自分もちょっとよくわかってない点がarray.0でエラーがでるところですね。多分、0がプリミティブな数値リテラルとして扱われてるからかなとか思うんですがなんともかんとも。</p>\n<h2>補足2:数値オブジェクトと文字列オブジェクト</h2>\n資料で数値も文字列もオブジェクトと書いてありますが厳密には違います。口頭で簡単に説明しましたがちゃんと文章で補足しておきます\n<p>文字列や数値にドットシンタックスをつけると一時的にプリミティブなリテラルからオブジェクトに変換されます。だからプロパティやメソッドを呼び出せるようになるわけです。あくまで<strong>変換</strong>なので厳密にはオブジェクトではない、ということです。</p>\n<h2>補足3:yoshioriさんのクイズ</h2>\n<a href=\"http://yoshiori.org/blog/\">yoshiori</a>さんのクイズで下のようなクイズがあったと思います。非プログラマな方にはいまいちわからない部分があったと思うので簡単に解説します。ちなみにswitch文とか他の問題は自分も理解があやふやなのでスルーです。\n<pre lang=\"javascript\">\nalert(2 &amp; 3 == 1);    //0</pre>\nまず各演算子には優先順位というものが存在します。(後で説明します)&amp;と==では==の方が優先順位が高いので3==1が先に評価され、falseが返されます。\n<p>falseというのは真偽値でいう偽の値でつまりは｢0｣です。そうすると2 &#x26; 0のビット演算が行われ0が返されるという訳です。</p>\n<p>とか言っても、ビット演算がわからないと思うのでそこを説明したいと思います。</p>\n<p>ビット演算は2進数で計算されます。2進数っていうのは10進数が10で次の桁に繰り上がるように2で次の桁に繰り上がります。つまり0と1で表現します。</p>\n<p>2を二進数で表すと0010になります。0は当然0000ですね。これを&#x26;演算します。</p>\n<pre>\n 0010\n&amp;0000\n------\n 0000</pre>\n<p>&#x26;演算というのは両方が1のときだけ1を返す演算です。今回は片方が0なので問答無用で全部0を返すということです。</p>\n<p>ちなみにalert(7 &#x26; 3)とかだったら3を返します。</p>\n<pre>\n 0111\n&amp;0011\n---------\n0011 = 3</pre>\n<p>ビット演算はあまり使う機会はないと思いますが、興味ある人は調べてみるといいと思います。</p>\n<h2>補足4:演算子の優先順位</h2>\n上でちょろっと言いましたが、演算子には優先順位というものが存在します。簡単な例を出してみます。\n<pre lang=\"javascript\">\nvar a = 100 + 200 * 10;alert(a); // 2100</pre>\naの宣言のところで演算子は = , + , *の３つがあります。この３つでの優先順位は * &gt; + &gt; = のようになります。\n<ul>\n<li>と + は数学と同じですからわかりやすいと思います。=が低いのは単純に計算が終わる前に値を代入しちゃうのはまずいよね?ってことです。</li>\n</ul>\n<p>上の式を頭で計算するときもまずは200 * 10して2000を求めます。そしたら100  + 2000で2100が得られるので最後にa= 2100しますよね。それと同じことです。</p>\n<p>他にも多種多様な演算子があってそれぞれ優先順位があります。さらに小難しい話をすると演算子の結合性といった話もでてきます。そこまで説明するのはちょっと骨が折れるので割愛しますが、なんとなくは演算子の優先順位といったものがわかっていただけると幸いです。</p>\n<h2>まとめ</h2>\nかなり長いエントリーになってしまい申し訳ないです。本当はもうちょっとDOMまわりの補足もしたかったんですが、それはまた別の機会にお話するかエントリーをあげたいと思います。\n<p>今回の勉強会は参加する側ではなく主催するという僕にとっては初の試みでしたが、無事(?) になんとか終えることができました。様々な方にご協力いただき本当にありがとうございます。</p>\n<p>第２回目希望の声もちらほらと聞こえており、うれしい限りです。もし次も発表する側であれば、ちゃんと準備して本番に望みたいと思います( 前日に資料作るとかあほだよねw)</p>\n<p>追記</p>\n<p>発表する側に立ってみて思ったことですが、あらためてアウトプットは大事だなと。本を読んだり、話を聞くよりも何倍も勉強になった気がします。デザイン勉強会の話もでてるみたいなので、もし発表するか迷ってる人はとりあえずやってみることをおすすめします。いろいろ不安もあると思いますが、みんないい人なのでなんとかなります、きっとw</p>\n<p>あ、あと全体のまとめはちょっと書ききれなかったので<a href=\"http://www.hamashun.com/blog/2007/07/javascript.html\">hamashun</a>さんのブログをみるよーに。</p>","frontmatter":{"title":"初心者向けJavaScript勉強会の資料公開と補足","date":"July 16, 2007","description":null}},"previous":{"fields":{"slug":"posts//2007/07/06/kanto_twitter/"},"frontmatter":{"title":"関東Twitter用Googleカレンダー"}},"next":{"fields":{"slug":"posts//2007/08/03/sicp_001/"},"frontmatter":{"title":"いい加減SICPを読み始めることにした"}}},"pageContext":{"id":"be263fbb-023a-5ad3-bc93-c671768ec6bb","previousPostId":"a2566a57-e996-5254-87b7-68b0e685822c","nextPostId":"b2011622-8604-5690-9d42-7da822e29c29"}},"staticQueryHashes":["2841359383"]}