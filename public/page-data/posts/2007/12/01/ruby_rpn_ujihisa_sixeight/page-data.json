{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2007/12/01/ruby_rpn_ujihisa_sixeight/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"8bfec476-97aa-5b78-9a6e-81c175815272","excerpt":"rubyneko - Re: UK STUDIO 後置記法での計算\n後置記法での計算の添削に便乗してみた - チナミニ ujihisaさんとSixeight…","html":"<p><a href=\"http://ujihisa.nowa.jp/entry/60c2b3fcf9\">rubyneko - Re: UK STUDIO 後置記法での計算</a>\n<a href=\"http://d.hatena.ne.jp/Sixeight/20071130/1196438912\">後置記法での計算の添削に便乗してみた - チナミニ</a></p>\n<p>ujihisaさんとSixeightさんには感謝です。せっかくなんで添削してもらったコードを自分なりにちゃんと理解しときたいと思います。</p>\n<h2>ujihisaさんのコード</h2>\n<pre lang=\"ruby\">\nclass String\n  def rpn\n    expr = self.split(\" \")\n    stack = []\n    operators = %w[+ - * /]\n\n    expr.each do |i|\n      if operators.include? i\n        stack = [calc(i, stack)]\n      else\n        stack < < i.to_i\n      end\n    end\n\n    stack[0]\n  end\n\n  private\n  def calc(operator, stack)\n    stack.inject {|result, i|\n      result.__send__(operator, i)\n    }\n  end\nend\n</pre>\n<h3>stackに文字列でなく数値を格納していく</h3>\n確かに所々でto_i使い過ぎだ。これだけで全然スッキリするなぁ・・・\n<h3>スコープは狭く</h3>\nですよねぇ。なんでクラス変数にしたんだろう、おれは。猛省。\n<h3>Array.newを[]に</h3>\n個人的にはなんかArray.newがしっくりくるんですよね。「Arrayをnewする」みたいな感じで。[]だとあまりそんな感じがしない。\n<p>まぁ慣れの問題な気もするので、[]も使っていこうと思います。</p>\n<h3>returnは省略</h3>\nこれはなんか個人的には解決してない問題でして。値を返すことを強調したいときはreturnをつけようとか思っていたんだけど。\n<p>ただ、Rubyは必ず値が返ってくることを考えると、やっぱり基本的に省略なのかなぁ。</p>\n<p>ちなみにTwitterでぼそっとぼやいたらこんな反応が。</p>\n<ul>\n<li><a href=\"http://twitter.com/yuki_neko_nyan/statuses/456843452\">http://twitter.com/yuki_neko_nyan/statuses/456843452</a></li>\n<li><a href=\"http://twitter.com/natsutan/statuses/456852982\">http://twitter.com/natsutan/statuses/456852982</a></li>\n</ul>\n<h3>Array(...)を[...]に</h3>\n[]で囲むのでもいいのか。知らなかった。\n<h3>calcがArrayを返すより、stackに入れるときにArrayにするべし</h3>\n説明がなんかHaskellerっぽいですな。\n<p>calc::char->[int]->[int]ってどう言う意味だっけ。確か、第1引数の型->第2引数の型->返り値の型だったかな。[int]はintの配列ってことかな・・・</p>\n<p>確かにcalcの処理内容を考えると[int]よりintの方がわかりやすいな。ふむ。</p>\n<h3> eachのブロックを{}からdo endに</h3>\nそもそも、自分のコーディング規約を守ってない件。複数行のブロックはdo...end使うって決めたのに!\n<p><q>副作用を目的としているケースでは、こちらのが直感的</q>とあるけど、何故だかちょっとわからない。直感的ってのもまた人それぞれな部分あるしなぁ。</p>\n<h3>if i == \"+\" || i == \"-\" || i == \"*\" || i == \"/\"をArray#include?を使ってシンプルにまとめた</h3>\nこのifは自分でも汚いなとは思ってた。各演算子を配列にまとめてinclude?で判断か。ブロック引数iの値が配列に含まれていればtrueを返すから、この場合だと\"+\", \"-\", \"*\", \"/\"のどれかだとtrueになると。\n<h3>calcについて</h3>\n</pre><pre lang=\"ruby\">\nresult.__send__(operator, i)\n</pre>\nって記述を見たとき、「あれ、resultに代入しなくていいの?」とか思ったんだけど、ちゃんと調べてみると途中のブロックの返り値は次の呼び出しの時にresultに渡されるんだとさ。ちゃんと調べろよって話ですね。\n<p>ujihisaさんにはさらに短かくしたコードも書いてもらってるんだけどまだちょっと追えてない。これはまた後日こっそり調べとく。</p>\n<h2>Sixeightさんのコード</h2>\n関係ないけどSixeightさんってtyoroの後輩だっけ?\n<pre lang=\"ruby\">\nclass String\n  # Reverse Polish Notation\n  # '4 5 +'.rpn => 4 + 5 = 9\n  def rpn\n    stack = []\n    opr = %q[ + - * / ]\n\n    split(' ').each do |i|\n      if opr.include? i\n        stack[-1] = stack[-2].__send__(i, stack.pop)\n      else\n        stack < < i.to_i\n      end\n    end\n    stack.first\n  end\nend\n</pre>\n<p>一応、最終的なコードを見せてもらう。(もちろん、その前のコードも読みましたよ)全体的にSixeightさんもujihisaさんのコードを見たあとのせいか、基本的には上で書いたことと同じ感じかなー。</p>\n<p>ただ、演算の処理をメソッドで別にせず1行で済ませてますな。あとオレの場合はめんどくさくて、stackを全部上書きしちゃってるけど、Sixeightさんはpopで取り出してちゃんと処理してる。</p>\n<p>個人的にはstack[-1]とstack[-2]が気になるかな。インデックスの-が個人的に好きじゃないようで。まぁあんなcalcメソッド書いといて何言ってるんだって感じですよね。すみません。</p>\n<p>逆ポーランド記法の仕様についてはあまりちゃんと調べてなかったり。なんかSchemeの前置記法と似た感覚で複数の値も計算するもんだと思ってたけど違うのかな。</p>\n<h3>追記</h3>\nはてブにSixeightさんのコメントが!\n<blockquote>\nインデックスの-は僕も否定派なんですが、スタックから取り出す順番をひっくり返すのが思い浮かばなくて＞＜精進しなきゃ\n</blockquote>\nやっぱ-は否定的なのかー。お互いがんばりまっしょい。\n<h2>書き直したコード</h2>\n</pre><pre lang=\"ruby\">\nclass String\n  def rpn\n    expr = self.split(\" \")\n    stack = []\n    operators = %w[+ - * /]\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">expr.each do |i|\n  if operators.include? i\n    stack = [stack.inject{|result, item| result.__send__(i, item)}]\n  else\n    stack &lt; &lt; i.to_i\n  end\nend\n\nstack.first</code></pre></div>\n<p>  end\nend</p>\n</pre>\nujihisaさんのコードをほとんど反映させた感じ。例外処理とか考えてないよ。あとスタックにある数値も全部計算する仕様のまま。</pre>","frontmatter":{"title":"後置記法のコードを添削してもらっちゃいました","date":"December 01, 2007","description":null}},"previous":{"fields":{"slug":"posts//2007/11/29/ruby_rpn/"},"frontmatter":{"title":"後置記法での計算"}},"next":{"fields":{"slug":"posts//2007/12/05/install_retrospectiva/"},"frontmatter":{"title":"RetrospectivaをMacBookに設置してみた"}}},"pageContext":{"id":"8bfec476-97aa-5b78-9a6e-81c175815272","previousPostId":"e5f8318e-7dba-50da-bbc3-6a8b386b45d0","nextPostId":"ff83906f-2dee-506c-9305-6ea50c6c8ee2"}},"staticQueryHashes":["2841359383"]}