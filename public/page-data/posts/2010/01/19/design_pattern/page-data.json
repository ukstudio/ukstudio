{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2010/01/19/design_pattern/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"9142883b-b6e3-5538-9319-99e5858f5948","excerpt":"先日、ちょっとした思いつきでTwitter上で好きなデザインパターンと嫌いなデザインパターンを募集してみたのでその結果をまとめる。 一応、今回答えてくれた人達のTwitterアカウントが全員Publicだったので各発言にリンクを貼っておいた。問題がある人はTwitter…","html":"<p>先日、ちょっとした思いつきでTwitter上で好きなデザインパターンと嫌いなデザインパターンを募集してみたのでその結果をまとめる。 一応、今回答えてくれた人達のTwitterアカウントが全員Publicだったので各発言にリンクを貼っておいた。問題がある人はTwitterかなにかで一言連絡を。</p>\n<h2>好きなパターン</h2>\n<h3>Stateパターン 2票</h3>\n<blockquote>\nstateパターンでしょうか。switch文がなくなりますです。 引用元:<a href=\"http://twitter.com/naokirin244/status/7691502069\">@naokirin244</a></blockquote>\n<blockquote>呼び出し側の条件分岐がなくなってすっきりするから。 引用元: <a href=\"http://twitter.com/mollifier/status/7934668617\">@mollifier</a></blockquote>\n<h3>TemplateMethodパターン 2票</h3>\n <blockquote>テンプレートパターンですね。ざっと動作を抽象化して、場合によってはストラテジーパターンあたりと組み合わせて抽象性あげると最高です。 引用元:<a href=\"http://twitter.com/takayuki_h/status/7690055834\">@takayuki_h</a>\n</blockquote>\n<blockquote>好きなのはTemplateMethod 引用元: @匿名</blockquote>\n<h3>Builderパターン 1票</h3>\n  <blockquote>私が1番好きなパターンはBuilderパターンです。流れるようなインタフェースが書けるし意図をコードに残しやすくもなるので、ライブラリ実装時に使いたくなります。  引用元:<a href=\"http://twitter.com/eller86/status/7666508995\">@eller86</a></blockquote>\n<h3>Commandパターン 2票</h3>\n  <blockquote>\nでも1番感動したのはCommandでアンドゥ・リドゥが簡単に実装できたときかも。 引用元:<a href=\"http://twitter.com/eller86/status/7666508995\">@eller86</a>\n</blockquote>\n<blockquote>\nキメると気持ちいい。 引用元: <a href=\"http://twitter.com/t_wada/status/7664824645\">@t_wada</a>\n</blockquote>\n<h3>Strartegyパターン 2票</h3>\n  <blockquote>好きなパターン \"Strategy\" 。継承より委譲を学べた (だったと思う)。\n引用元:<a href=\"http://twitter.com/koic/status/7664977699\">@koic</a> </blockquote>\n  <blockquote>OOPの持つインタフェースと実装の分離が分かりやすいため。 引用元: <a href=\"http://twitter.com/a_hisame/status/7664700029\">@a_hisame</a> </blockquote>\n<h3>Compositeパターン 1票</h3>\n  <blockquote>好きというか、OO言語でこのパターンを使わずして、構造化されたデータを表現するのは困難でしょう。 引用元: <a href=\"http://twitter.com/kmizu/status/7664757139\">@kmizu</a></blockquote>\n<h2>嫌いなパターン</h2>\n<h3>Singletonパターン 3票</h3>\n  <blockquote>嫌いなパターンは \"Singleton\" 。マルチスレッドプログラミングのロック問題や、同一 JVM 内でのみ sole instance など、厄介な問題を抱えているので。 引用元:<a href=\"http://twitter.com/koic/status/7665354770\">@koic</a>\n</blockquote>\n<blockquote>\nコードの結合度を無駄に高めるし、本当に唯一の情報にしたいときにはプロセス内での唯一性程度では足りない (本当に唯一にしたいときは、プロセス間とかネットワーク上で唯一じゃないとダメなケースが多い) ため。 引用元： <a href=\"http://twitter.com/t_wada/status/7664710134\">@t_wada</a>\n</blockquote>\n<blockquote>ただのグローバル変数化されてしまって死にそうになった。 引用元: @匿名</blockquote>\n<h3>Interpreterパターン 1票</h3>\n  <blockquote>実際にこのパターンで言語処理系を作るのはメンテナンス性が悪過ぎる  引用元: <a href=\"http://twitter.com/kmizu/status/7664576975\">@kmizu</a></blockquote>\n<p>正直、もう少し回答の数が欲しかったところだけど集まらなかったのだから仕方がない。とりあえず引き続き回答を募集するので、Twitter上やこのブログのコメントやトラックバックなどでどうぞ。しばらくはこのエントリに追記していく予定。</p>\n<p>ちなみに今回の票に反映はさせてないけど、僕が好きなパターンはStrategyパターンです。 嫌いなパターンは今のところ特にないかな。</p>\n<table class=\"g-tools_table\"><tbody><tr><td colspan=\"2\"><span class=\"g-tools_title\"><a href=\"http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF-%E3%82%AC%E3%83%B3%E3%83%9E/dp/4797311126%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3D2004-05-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797311126\" target=\"_blank\">&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x6307;&#x5411;&#x306B;&#x304A;&#x3051;&#x308B;&#x518D;&#x5229;&#x7528;&#x306E;&#x305F;&#x3081;&#x306E;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30D1;&#x30BF;&#x30FC;&#x30F3;</a><img src=\"http://www.assoc-amazon.jp/e/ir?t=2004-05-22&amp;l=ur2&amp;o=9\" width=\"1\" height=\"1\" border=\"0\" alt></span></td></tr><tr><td valign=\"top\"><span class=\"g-tools_img\"><a href=\"http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF-%E3%82%AC%E3%83%B3%E3%83%9E/dp/4797311126%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3D2004-05-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797311126\" target=\"_blank\"><img src=\"http://ecx.images-amazon.com/images/I/41SvGvCi1eL._SL160_.jpg\" alt=\"&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x6307;&#x5411;&#x306B;&#x304A;&#x3051;&#x308B;&#x518D;&#x5229;&#x7528;&#x306E;&#x305F;&#x3081;&#x306E;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30D1;&#x30BF;&#x30FC;&#x30F3;\"></a></span></td><td valign=\"top\"><span class=\"g-tools_body\">Erich Gamma <br><br>&#x30BD;&#x30D5;&#x30C8;&#x30D0;&#x30F3;&#x30AF;&#x30AF;&#x30EA;&#x30A8;&#x30A4;&#x30C6;&#x30A3;&#x30D6;  1999-10<br>&#x58F2;&#x308A;&#x4E0A;&#x3052;&#x30E9;&#x30F3;&#x30AD;&#x30F3;&#x30B0; : 23044<br><br><strong>&#x304A;&#x3059;&#x3059;&#x3081;&#x5E73;&#x5747;  </strong><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif\" alt=\"star\"><br><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif\" alt=\"star\">&#x5185;&#x5BB9;&#x306F;&#x826F;&#x3044;&#x304C;&#x7FFB;&#x8A33;&#x304C;&#x3002;&#x3002;&#x3002;<br><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif\" alt=\"star\">&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x6559;&#x3078;&#x3088;&#x3046;&#x3053;&#x305D;<br><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif\" alt=\"star\">&#x8A2D;&#x8A08;&#x306E;&#x518D;&#x5229;&#x7528;<br><br><a href=\"http://www.amazon.co.jp/%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3-%E3%82%A8%E3%83%AA%E3%83%83%E3%82%AF-%E3%82%AC%E3%83%B3%E3%83%9E/dp/4797311126%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3D2004-05-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797311126\" target=\"_blank\">Amazon&#x3067;&#x8A73;&#x3057;&#x304F;&#x898B;&#x308B;</a></span><span class=\"g-tools_by\"> by <a href=\"http://www.goodpic.com/mt/aws/index.html\">G-Tools</a></span></td></tr></tbody></table>\n<table class=\"g-tools_table\"><tbody><tr><td colspan=\"2\"><span class=\"g-tools_title\"><a href=\"http://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797316462%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3D2004-05-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797316462\" target=\"_blank\">Java&#x8A00;&#x8A9E;&#x3067;&#x5B66;&#x3076;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x5165;&#x9580;</a><img src=\"http://www.assoc-amazon.jp/e/ir?t=2004-05-22&amp;l=ur2&amp;o=9\" width=\"1\" height=\"1\" border=\"0\" alt></span></td></tr><tr><td valign=\"top\"><span class=\"g-tools_img\"><a href=\"http://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797316462%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3D2004-05-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797316462\" target=\"_blank\"><img src=\"http://ecx.images-amazon.com/images/I/41XMDFXX4GL._SL160_.jpg\" alt=\"Java&#x8A00;&#x8A9E;&#x3067;&#x5B66;&#x3076;&#x30C7;&#x30B6;&#x30A4;&#x30F3;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x5165;&#x9580;\"></a></span></td><td valign=\"top\"><span class=\"g-tools_body\"><br>&#x30BD;&#x30D5;&#x30C8;&#x30D0;&#x30F3;&#x30AF;&#x30AF;&#x30EA;&#x30A8;&#x30A4;&#x30C6;&#x30A3;&#x30D6;  2001-06<br>&#x58F2;&#x308A;&#x4E0A;&#x3052;&#x30E9;&#x30F3;&#x30AD;&#x30F3;&#x30B0; : 216240<br><br><strong>&#x304A;&#x3059;&#x3059;&#x3081;&#x5E73;&#x5747;  </strong><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif\" alt=\"star\"><br><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif\" alt=\"star\">&#x8A2D;&#x8A08;&#x578B;&#x7D19;<br><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif\" alt=\"star\">&#x3059;&#x3070;&#x3089;&#x3057;&#x3044;&#x672C;&#x3067;&#x3059;<br><img src=\"http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif\" alt=\"star\">Java&#x4EE5;&#x5916;&#x3067;&#x3082;&#x4F7F;&#x3048;&#x307E;&#x3059;&#x3002;<br><br><a href=\"http://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797316462%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3D2004-05-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797316462\" target=\"_blank\">Amazon&#x3067;&#x8A73;&#x3057;&#x304F;&#x898B;&#x308B;</a></span><span class=\"g-tools_by\"> by <a href=\"http://www.goodpic.com/mt/aws/index.html\">G-Tools</a></span></td></tr></tbody></table>","frontmatter":{"title":"Twitterで好きなデザインパターン、嫌いなデザインパターンを聞いてみた","date":"January 19, 2010","description":null}},"previous":{"fields":{"slug":"posts//2010/01/14/programmer_employ/"},"frontmatter":{"title":"プログラマの採用について考えてみる"}},"next":{"fields":{"slug":"posts//2010/01/31/opensocial-ruby-client/"},"frontmatter":{"title":"opensocial-ruby-clientでmixiのRESTful APIを使ってみた"}}},"pageContext":{"id":"9142883b-b6e3-5538-9319-99e5858f5948","previousPostId":"569d44f2-48cb-5a59-85aa-2dfbfac30309","nextPostId":"eb70cb75-5337-59f3-a37a-b59812a6831b"}},"staticQueryHashes":["2841359383"]}