{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts//2015/04/30/rails_with_vuejs/","result":{"data":{"site":{"siteMetadata":{"title":"UKSTUDIO BLOG"}},"markdownRemark":{"id":"459ab35e-0418-51c1-b485-dd5f85c2f1e8","excerpt":"今回は現在所属しているspicelifeのサービスの1つであるSPOTLIGHTSにVue.jsを採用した話をしようと思います。 SPOTLIGHTS自体は一般的なRailsアプリケーションといって問題ない作りになっているので、既存のRailsアプリケーションにどういった形でVue.js…","html":"<p>今回は現在所属しているspicelifeのサービスの1つである<a href=\"https://spotlights.jp/\">SPOTLIGHTS</a>にVue.jsを採用した話をしようと思います。</p>\n<p>SPOTLIGHTS自体は一般的なRailsアプリケーションといって問題ない作りになっているので、既存のRailsアプリケーションにどういった形でVue.jsを投入していったかを中心に書いていきます。</p>\n<h2>Vue.js採用前の状況</h2>\n<p>SPOTLIGHTS初期のJavaScriptはHTML/CSSと共に外注し納品してもらったものです。 フレームワークといった類はほぼ使っておらずjQueryに頼りきったコードでした。</p>\n<p>当時は様々な事情によりこれはこれで妥当な判断だったと思うですが、今後社内でメンテナンスしていくうえで足かせになるであろうというのはなんとなく予想ができていました。jQueryのイベントハンドラやDOM操作がひとつのファイルにひたすら連なっているという状況だったためです。</p>\n<p>そのため2014年の12月にVue.jsの採用を決定し、少しずつ置き換えていきました。</p>\n<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20150430/20150430151446.png\"></p>\n<h2>Vue.jsに決定した理由</h2>\n<p>JavaScriptのフレームワークを採用するにあたって、Knockout.jsとVue.jsのどちらかにしようと考えていました。フルスタックのフレームワークを除外したのはそのライブラリが廃れた場合の移行や、既存のJavaScriptを少しずつ置き換えるコストを考えた場合にあまり向いていないと判断したためです。またReact.jsも考えましたが、私含めチーム全体のJavaScript力を考えた時に少々チャレンジングすぎるかなと思いこちらも除外しました。</p>\n<p>Knockout.jsではなくVue.jsを採用した理由ですが、簡単に言ってしまえば私の独断と偏見です。Knockout.jsは弊社エンジニアのid:asonasが使用経験がありましたがVue.jsの使用経験を持つメンバーが社内にいなかったため、せっかくだし新しいもの触ってみようという気持ちで決めました。また、Vue.jsの採用でネックになりそうなIE対応ですがSPOTLIGHTSではIE8はサポート外だったというのもあります。</p>\n<h2>Vue.jsのインストールにはRails Assetsを使用</h2>\n<p>Vue.jsのインストール手段ですが<a href=\"https://rails-assets.org/\">Rails Assets</a>を採用しました。</p>\n<p>SPOTLIGHTSは元々JSなどは外部のライブラリも含め同じgitリポジトリ内で管理されていました。その為、本番環境にNode.jsはインストールされておらず今回のためにNode.jsをインストールするのにも少々抵抗がありました。新しい何かを採用する際に同時に新しいものを採用すると混乱しがちだからです。</p>\n<p>その点Rais AssetsはGemfileに1行追加するだけでVue.jsをインストールすることができました。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">gem <span class=\"token string\">'rails-assets-vue'</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://rails-assets.org'</span></code></pre></div>\n<h2>導入初期はonClickをv-onに置き換え</h2>\n<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20150430/20150430151507.png\"></p>\n<p>導入としてまずはonClickで制御していた上記画像のようなモーダルの開閉をVue.jsに置き換えました。元々は.openModalというクラスにイベントハンドラをあてていましたが、それを削除しVueのメソッドをv-onで呼ぶようにしました。また同時にモーダルを開閉する処理を行っていたJavaScriptも全てCoffeeScriptに書きなおしました。</p>\n<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20150430/20150430151532.png\"></p>\n<p>この時点ではイベントハンドラを置き換えただけなのであまり大きなメリットはありませんでした。コードの見通しは若干よくなりはしましたが、モーダルは至る所で使われていたので影響範囲が広く一部でモーダルが開かない/閉じないなどのバグを発生させてしまったぐらいです。</p>\n<p>ですが、私自身まずVue.jsに慣れるという点にフォーカスしていたので置き換えやすいv-onから使いはじめるというのは妥当な判断だったと思います。</p>\n<h2>データバインディングでVue.jsのメリットを感じる</h2>\n<p>Vue.jsのメリットが目立つようになってきたのは私達がranunculus(ラナンキュラス)というコードネームで呼んでいるリニューアルへの作業が始まってしばらくした頃です。</p>\n<p>SPOTLIGHTSはお花を贈るサービスですので当然贈るお花を決める必要があります。お花を選択するページも今回のリニューアル対象でした。新しいお花の選択ページではクリックしたお花を同画面の下の部分で表示するようになっています。</p>\n<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20150430/20150430151553.png\"></p>\n<p>Vue.jsのデータバインディングを使うことでDOM操作を自前で書かなくとも、Vueのメソッド内でdataの値を変更することでプレビューも自動的に変わるようになりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"coffee\"><pre class=\"language-coffee\"><code class=\"language-coffee\"><span class=\"token comment\"># 擬似コードです</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span>\n  <span class=\"token property\">data</span><span class=\"token operator\">:</span>\n    <span class=\"token property\">product</span><span class=\"token operator\">:</span>\n      <span class=\"token property\">imagePath</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token property\">methods</span><span class=\"token operator\">:</span>\n    <span class=\"token property\">selectProduct</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n      <span class=\"token class-member variable\">@product</span><span class=\"token punctuation\">.</span>imagePath <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>imagePath</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"haml\"><pre class=\"language-haml\"><code class=\"language-haml\"><span class=\"token tag\">%img<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">v-attr</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">'src:</span> product.imagePath'<span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<p>今回のリニューアルではユーザーがなにか操作(大体においてクリック)したら、別の箇所も書き換えるというケースがそれなりにありデータバインディングのお手軽さには非常に助けられました。jQueryでも当然同じことは実現できますが実装の手間は大分軽減されたと感じています。</p>\n<h2>ページごとにVueインスタンスを作り肥大化を抑える</h2>\n<p>SPOTLIGHTSはRailsアプリケーションですのでJavaScriptのファイル群は全てSprocketsによってapplication.jsに統合されます。よってVue.js採用時点でページごとにJavaScriptを読み分ける仕組みはありませんでした。</p>\n<p>最初のうちはひとつのVueインスタンスに全てのコードを詰め込んでいました。想像に難くないと思いますが当然肥大化します。Vue.jsにはmixinの仕組みがあるのでファイル自体は分割できるのですがインスタンスの肥大化自体は避けられません。さすがに厳しいと感じたので対応することにしました。</p>\n<p>案としてはふたつありました。ひとつは各ページごとにJavaScriptファイルを用意し個別に読み込ませること。Sprocketsはapplication.rbの指定で個別にファイルを用意することができるので不可能ではありませんでしたが、既存ページに個別に読み込む処理を記述していくのは大変だなと思い却下しました。</p>\n<p>採用した案はもうひとつのapplication.js上で読み込む処理を切り替えることでした。具体的に言ってしまえばbodyタグにそのページ専用のdata attributesを持たせその値を見て分岐させます。</p>\n<div class=\"gatsby-highlight\" data-language=\"haml\"><pre class=\"language-haml\"><code class=\"language-haml\"><span class=\"token tag\">%body<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">data-controller-name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">\"#{controller.controller_name}\"</span> <span class=\"token attr-name\">data-action-name</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">\"#{controller.action_name}\"</span><span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"coffee\"><pre class=\"language-coffee\"><code class=\"language-coffee\"><span class=\"token keyword\">switch</span> controller_name\n  <span class=\"token keyword\">when</span> <span class=\"token string\">'plans'</span>\n    <span class=\"token keyword\">switch</span> action_name\n      <span class=\"token keyword\">when</span> <span class=\"token string\">'new'</span>\n        <span class=\"token comment\"># PlansController#newの処理</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token comment\"># それ以外のページの処理</span></code></pre></div>\n<p>この方法の利点は既存のページの影響を最小限に少しずつ置き換えていくことができることです。あるページに関する実装や修正が発生したときに、それらとあわせてそのページ専用のVueインスタンスに置き換えていきました。</p>\n<p>switch文の複雑さを抱えてしまいましたが、Vueインスタンスはページごとに分割されたおかげで肥大化を抑えることができました。</p>\n<h2>コンポーネントの利用</h2>\n<p>Vueインスタンスをページごとに作るようにしたといってもページによってはそれなりの複雑さになることがありました。そのためコンポーネントを用いて更に分割することにしました。</p>\n<p>上記画像はお花のお届け日を選択するカレンダーですが、ここですることは大まかに3つあります。</p>\n<ul>\n<li>選択された日付に応じてカレンダーの描画を変更する</li>\n<li>選択された日付に応じてプレビューの描画を変更する</li>\n<li>選択された日付をPOST用のhidden fieldの値に入れる</li>\n</ul>\n<p>この3つのうち最初の1つをコンポーネントとして実装しました。このカレンダーは選択されたお届け日に対して、お花の購入締切日の計算やカレンダーの各要素のクラスの割り当てなどそれなりに複雑な処理が必要でした。その部分をコンポーネントとすることで、日付選択のUIに関する部分だけど1つのまとまりにできます。</p>\n<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20150430/20150430151619.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"coffee\"><pre class=\"language-coffee\"><code class=\"language-coffee\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delivery-calendar'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">methods</span><span class=\"token operator\">:</span>\n    <span class=\"token property\">selectDeliveryDate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n      <span class=\"token comment\"># カレンダーの描画処理</span>\n      <span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'selectDeliveryDate'</span><span class=\"token punctuation\">,</span> <span class=\"token property\">delivery_date</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>deliveryDate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span>\n  <span class=\"token property\">methods</span><span class=\"token operator\">:</span>\n    <span class=\"token property\">fillFormAndPreview</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n      <span class=\"token comment\"># 選択日時のプレビュー</span>\n      <span class=\"token comment\"># POST用hidden fieldの値更新</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"haml\"><pre class=\"language-haml\"><code class=\"language-haml\"><span class=\"token tag\">%delivery-calendar<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">data-v-events</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">'selectDeliveryDate:</span> fillFormAndPreview'<span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<p>このコンポーネントは選択された日付を$emitを使ってイベントと一緒に通知しますが、それをどう処理するかに関しては関与しません。イベントを受け取る側では選択に関する細々とした処理がコンポーネント内に隠蔽されるため、その日付をどう処理するかにだけ集中すればよくコードの見通しもよくなります。</p>\n<p><img src=\"http://cdn-ak.f.st-hatena.com/images/fotolife/u/ukstudio/20150430/20150430151637.png\"></p>\n<p>また、こうすることでカレンダーを別のページでも使えるようになりました。上の画像は左右それぞれ別のページですが、同じコンポーネントを使っています。またそれぞれ選択された日付に応じて行うべき処理が若干違うのですが、それはイベントを受け取った側で処理するだけなのでコンポーネント側では気にする必要がありません。</p>\n<h3>テンプレートはscriptタグを使用</h3>\n<p>コンポーネントで使用するテンプレートはscriptタグで定義するようにしました。なぜかというとカレンダーのHTMLなどは元々Hamlで書かれていたのでそれらの資産をそのまま流用したかったのと、チームのエンジニアがHamlに馴染んでいるためこの方式ならば抵抗感もないだろうという判断のためです。</p>\n<div class=\"gatsby-highlight\" data-language=\"haml\"><pre class=\"language-haml\"><code class=\"language-haml\"><span class=\"token tag\">%script<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">'text/x-template'</span><span class=\"token punctuation\">)</span></span></span>\n  <span class=\"token tag\">.delivery-calendar</span>\n    省略\n<span class=\"token tag\">%delivery-calendar</span></code></pre></div>\n<p>コンポーネントのタグとセットで必ずscriptタグも必要になってしまいますが、Railsのpartialの仕組みを使えばあまり問題になりません。</p>\n<h2>まとめ</h2>\n<p>さて、いかがだったでしょうか。既にプロダクションとして投入しているRailsアプリケーションにVue.jsを採用した事例として参考になれば幸いです。</p>\n<p>現時点で課題はいくつか残っており、例えばVueインスタンスを振り分けるためのswitch文がそれなりにでかくちょっと無視できない感じになってきました。この問題に関してはなんらかのルーティングライブラリの採用などを検討しています。</p>\n<p>とはいえ基本的にはチームからの評判もよく、ここ2ヶ月の進捗を見ている限りではVue.js採用は概ね成功といえる状況です。今後もよりよいサービスを作れるよう色々挑戦していきたいと思っています。</p>\n<p>長々とありがとうございました。</p>","frontmatter":{"title":"既存のRailsアプリケーションにVue.jsを採用した話","date":"April 30, 2015","description":null}},"previous":{"fields":{"slug":"posts//2015/04/19/follow-update-of-gem/"},"frontmatter":{"title":"特定のGemの更新情報を追う"}},"next":{"fields":{"slug":"posts//2015/06/15/ux_introduction/"},"frontmatter":{"title":"UX概論に参加した"}}},"pageContext":{"id":"459ab35e-0418-51c1-b485-dd5f85c2f1e8","previousPostId":"d76da7e1-8fd4-59ee-82e8-568ce0c8f0bd","nextPostId":"1cf4adf7-d812-51aa-8ebd-c1e7cd5bf87d"}},"staticQueryHashes":["2841359383"]}